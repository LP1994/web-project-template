SSE是GET请求类型

当 Access-Control-Allow-Origin:* 时
不允许使用凭证(即不允许设置withCredentials为true)

当 Access-Control-Allow-Origin:* 时，
只需确保客户端在发出CORS请求时凭据标志的值为false就可以了。
1、如果请求使用XMLHttpRequest发出，请确保withCredentials为false。
2、如果使用服务器发送事件，确保EventSource.withCredentials是false（这是默认值）。
3、如果使用Fetch API，请确保Request.credentials是"omit"。


动态创建new EventSource( 'http://127.0.0.1:9999/SSEA/Test1?arg1=1&arg2=true#target1', { withCredentials: false } )，
通过URL的参数(arg1=1&arg2=true)，可以做到向服务器传一些简单的参数，做到“双向”通信


Server-Sent Event
客户端单向的获取到服务器发送的数据，客户端没有发送的功能，只有接受数据的功能
适用于实时类的应用
注：不是所有主流浏览器均支持Server-Sent Event，如Edge、Internet Explorer不支持的。
onerror函数
onmessage函数
onopen函数
close函数
readyState : 2
url : "http://localhost:8081/WebProTpl/app/pages/dd.php"
withCredentials : false
CLOSED : 2
CONNECTING : 0
OPEN : 1

EventSource.readyState 只读
表示连接状态的数字。可能的值为CONNECTING（0），OPEN（1）或CLOSED（2）。


例子：
不同的域上(withCredentials: false可以跨域)
var evtSource = new EventSource("//api.example.com/ssedemo.php", { withCredentials: false } );
同的域上
var evtSource = new EventSource("ssedemo.php");

服务器上没有event字段的消息
evtSource.onmessage = function(e) {
console.dir(e.data);
}
服务器发送event字段设置为“ping”
evtSource.addEventListener("ping", function(e) {
console.dir(e.data);
}, false);

错误处理
evtSource.onerror = function(e) {
  console.log("EventSource failed.");
};

关闭事件流
evtSource.close();



事件流格式
事件流仅仅是一个简单的文本数据流，文本应该使用UTF- 8格式的编码，每条消息后面都由一个空行作为分隔符，以冒号开头的行为注释行，会被忽略。
注：注释行可以用来防止连接超时，服务器可以定期发送一条消息注释行，以保持连接不断。

每条消息是由多个字段组成的，每个字段由字段名，一个冒号，以及字段值组成。

字段
规范中规定了下面这些字段：
event
事件类型。
如果指定了该字段，则在客户端接收到该条消息时，会在当前的EventSource对象上触发一个事件，事件类型就是该字段的字段值，你可以使用addEventListener()方法在当前EventSource对象上监听任意类型的命名事件，如果该条消息没有event字段，则会触发onmessage属性上的事件处理函数。
data
消息的数据字段，如果该条消息包含多个data字段，则客户端会用换行符把它们连接成一个字符串来作为字段值。
id
事件ID，会成为当前EventSource对象的内部属性“最后一个事件ID”的属性值。
retry
一个整数值，指定了重新连接的时间(单位为毫秒)，如果该字段值不是整数，则会被忽略。

除了上面规定的字段名，其他所有的字段名都会被忽略。

注：如果一行文本中不包含冒号，则整行文本会被解析成为字段名，其字段值为空。

事件流格式例子：
1、未命名事件
下面的例子中发送了三条消息，第一条仅仅是个注释(如前所述，如果不定期发送消息，这可以作为保持活动状态)，因为它以冒号开头。第二条消息只包含了一个data字段，值为"some text"。第三条消息包含的两个data字段会被解析成为一个字段，值为"another message\nwith two lines"。其中每两条消息之间是以一个空行为分割符的。
: this is a test stream

data: some text

data: another message
data: with two lines

2、命名事件
下面的事件流中包含了一些命名事件。每个事件的类型都是由event字段指定的，另外每个data字段的值可以使用JSON格式，当然也可以不是。
event: userconnect
data: {"username": "bobby", "time": "02:33:48"}

event: usermessage
data: {"username": "bobby", "time": "02:34:11", "text": "Hi everyone."}

event: userdisconnect
data: {"username": "bobby", "time": "02:34:23"}

event: usermessage
data: {"username": "sean", "time": "02:34:36", "text": "Bye, bobby."}

3、混合两种事件
你可以在一个事件流中同时使用命名事件和未命名事件。
event: userconnect
data: {"username": "bobby", "time": "02:33:48"}

data: Here's a system message of some kind that will get used
data: to accomplish some task.

event: usermessage
data: {"username": "bobby", "time": "02:34:11", "text": "Hi everyone."}


服务器部分例子说明：
发送事件的服务器端脚本需要使用MIME类型"text/event-stream"进行响应。每个通知都作为由一对换行符终止的文本块发送。
我们在这里使用的示例的PHP代码如下：
<?php
date_default_timezone_set("America/New_York");
header("Content-Type: text/event-stream");
$counter = rand(1, 10); // a random counter
while (1) {
// 1 is always true, so repeat the while loop forever (aka event-loop)
  $curDate = date(DATE_ISO8601);
  echo "event: ping\n",
       'data: {"time": "' . $curDate . '"}', "\n\n";
  // Send a simple message at random intervals.
  $counter--;
  if (!$counter) {
    echo 'data: This is a message at time ' . $curDate, "\n\n";
    $counter = rand(1, 10); // reset random counter
  }
  // flush the output buffer and send echoed messages to the browser
  while (ob_get_level() > 0) {
    ob_end_flush();
  }
  flush();
  // break the loop if the client aborted the connection (closed the page)
  
  if ( connection_aborted() ) break;
  // sleep for 1 second before running the loop again
  
  sleep(1);
}



例子：
客户端代码
                let evtSource = new EventSource( 'http://127.0.0.1:9999', { withCredentials: false } ),
                    time = 0,
                    now = 0,
                    sseTest1 = CTO.gById( '#sseTest1' );
                evtSource.onopen = event => {
                };
                evtSource.onmessage = event => {
                    console.log( '------>onmessage Start<------' );
                    console.dir( event );
                    console.log( '------>onmessage End<------' );
                };
                evtSource.onerror = event => {
                };
                evtSource.addEventListener( 'testEvent1', event => {
                    if( time == 0 ){
                        time = new Date().getTime();
                    }
                    else{
                        now = new Date().getTime();
                        console.log( '间隔时间(单位是秒):' + ( now - time ) / 1000 );
                        time = now;
                    }
                    sseTest1.textContent = JSON.parse( event.data ).year;
                }, false );
服务器代码
let http = require( 'http' ),
    num = 0,
    year = 1994,
    id = 20181111;
http.createServer( ( req, res ) => {
    if( req ){
        console.log( '------>服务端收到一个客户端请求<------' );
    }
    res.writeHead( 200, {
        'Content-Type': 'text/event-stream',
        'Access-Control-Allow-Origin': '*'
    } );
    res.write( `:this is a SSE for test stream\n\nevent:testEvent1\ndata:{"year":${year}}\nid:${id}\nretry:3000\n\n` );
    res.end();
    console.log( '------>服务端响应该客户端请求结束<------' );
    console.log( ++num );
    ++year;
    ++id;
} ).listen( 9999, '127.0.0.1' );
console.log( '------>服务端启动，端口：9999，IP：127.0.0.1<------' );
