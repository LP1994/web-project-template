Web Workers(运行在后台的 JavaScript)
https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers
web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。
您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。
用于更耗费 CPU 资源的任务！！！
比如海量数据的处理和显示！！！Worker 线程完成轮询！！！
注：所有主流浏览器均支持 web worker，除了 Internet Explorer。
Worker 线程一旦新建成功，就会始终运行，不会被主线程上的活动（比如用户点击按钮、提交表单）打断。
这样有利于随时响应主线程的通信。
但是，这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。

var myWorker = new Worker(jsUrl, options);
第一个参数是脚本的网址（必须遵守同源政策），该参数是必需的，且只能加载 JS 脚本，否则会报错。
第二个参数是配置对象，该对象可选。
它的一个作用就是指定 Worker 的名称，用来区分多个 Worker 线程。
// 主线程
var myWorker = new Worker('worker.js', { name : 'myWorker' });
// Worker 线程(worker.js)
self.name // myWorker

var w=new Worker("demo_workers.js");
w.onmessage=function(e){
console.dir(e.data);
};
终止 web worker，并释放浏览器/计算机资源
w.terminate();

Worker.onerror：指定 error 事件的监听函数。
Worker.onmessage：指定 message 事件的监听函数，发送过来的数据在Event.data属性中。
Worker.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。
Worker.postMessage()：向 Worker 线程发送消息。当主线程和工作线程之间传递消息时，它将被复制或“传输”（移动），而不是共享。
Worker.terminate()：立即终止 Worker 线程。

Web Worker 有以下几个使用注意点。
1、分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。
2、由于 web worker 位于外部文件中，它们无法访问下例 JavaScript 对象：
window 对象
document 对象
parent 对象
3、但是，Worker 线程可以navigator对象和location对象。Array, Date, Math, and String
4、Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。
5、Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象(尽管responseXML和channel属性始终为null)发出 AJAX 请求。
6、Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。
7、WindowTimers.setTimeout and WindowTimers.setInterval

主线程调用worker.postMessage()方法，向 Worker 发消息。
postMessage方法的参数，就是主线程传给 Worker 的数据。它可以是各种数据类型，包括二进制数据。
worker.postMessage('Hello World');
主线程通过worker.onmessage指定监听函数，接收子线程(worker线程)发回来的消息。
worker.onmessage = function (event) {
  console.dir(event.data);
}
worker.onerror(function (event) {
message
可读性良好的错误消息。
filename
发生错误的脚本文件名。
lineno
发生错误时所在脚本文件的行号。
  console.log([
    'ERROR: Line ', e.lineno, ' in ', e.filename, ': ', e.message
  ].join(''));
});
// 或者
worker.addEventListener('error', function (event) {
  // ...
});

Worker 完成任务以后，主线程就可以把它关掉。
worker.terminate();

子线程(Worker线程)！！！

Worker 线程有一些自己的全局属性和方法。
self.name： Worker 的名字。该属性只读，由构造函数指定。
self.onmessage：指定message事件的监听函数。
self.onmessageerror：指定 messageerror 事件的监听函数。发送的数据无法序列化成字符串时，会触发这个事件。
self.close()：关闭 Worker 线程。
self.postMessage()：向产生这个 Worker 线程发送消息。
self.importScripts()：加载 JS 脚本。

Worker 线程内部需要有一个监听函数，监听message事件。
self.addEventListener('message', function (e) {
  self.postMessage('You said: ' + e.data);
}, false);
self代表子线程自身，即子线程的全局对象。因此，等同于下面两种写法。
// 写法一
this.addEventListener('message', function (e) {
  this.postMessage('You said: ' + e.data);
}, false);
// 写法二
addEventListener('message', function (e) {
  postMessage('You said: ' + e.data);
}, false);
也可以使用self.onmessage指定
监听函数的参数是一个事件对象，它的data属性包含主线程发来的数据。
self.postMessage()方法用来向主线程发送消息。

Worker 内部也可以监听error事件。

子线程(Worker线程)内部关闭自身
self.close()

子线程(Worker线程)加载脚本
importScripts('script1.js');
importScripts('script1.js', 'script2.js');
如：
TestClassA.js的内容：
class TestClassA{
constructor(){
console.log( 'TestClassA' );
}
}
let q1 = 11;

子线程写如下代码：
importScripts('TestClassA.js')
随后子线程直接运行如下代码：
new TestClassA();
console.dir( q1 );
就能运行了！！！
也就是说所加载的JS的所有的全局变量都能在加载后使用！！！


拷贝方式发送二进制数据，会造成性能问题！可使用Transferable Objects直接转移数据的控制权
// Transferable Objects 格式
worker.postMessage(arrayBuffer, [arrayBuffer]);
// 例子
var ab = new ArrayBuffer(1);
worker.postMessage(ab, [ab]);

主线程和 Worker 的代码都在同一个网页上面。
<script id="worker" type="app/worker">
      addEventListener('message', function () {
        postMessage('some message');
      }, false);
</script>
注意必须指定<script>标签的type属性是一个浏览器不认识的值，上例是app/worker。
var blob = new Blob([document.querySelector('#worker').textContent]);
var url = window.URL.createObjectURL(blob);
var worker = new Worker(url);
worker.onmessage = function (e) {
  // e.data === 'some message'
};

Worker 线程内部还能再新建 Worker 线程（目前只有 Firefox 浏览器支持）。

生成一个共享worker
var myWorker = new SharedWorker('worker.js');