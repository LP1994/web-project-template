ts-node支持通过在“tsconfig.json”中添加属于ts-node的选项来配置参数，具体见ts-node的官方文档：https://typestrong.org/ts-node/docs/。

例子：
ts-node-esm -P ./configures/tsconfig/ts-node.tsconfig.json5 ./src/DemoA.mts
ts-node --esm -P ./tsconfig.json ./src/DemoA.mts

代码：
function Fun1(){
  console.log( 'Fun1' );
}

function Fun2(){
  console.log( 'Fun2' );
}

function Fun3(){
  console.log( 'Fun3' );
}

function Fun4(){
  console.log( 'Fun4' );
}

function Fun5(){
  console.log( 'Fun5' );
}

function Fun6(){
  console.log( 'Fun6' );
}

function Start(){
  console.log( 'Start1' );

  setImmediate( Fun1 );

  new Promise( ( resolve, reject ) => {
    resolve( 'Promise1' );
  } ).then( ( resolve ) => {
    console.log( resolve );

    process.nextTick( Fun2 );
  } );

  new Promise( ( resolve, reject ) => {
    resolve( 'Promise2' );
  } ).then( ( resolve ) => {
    console.log( resolve );

    process.nextTick( Fun3 );
  } );

  process.nextTick( Fun4 );

  console.log( 'Start2' );

  process.nextTick( Fun5 );

  console.log( 'Start3' );

  process.nextTick( Fun6 );

  console.log( 'Start4' );
}

Start();



说明：
执行node Demo001.ts、node Demo001.cts、node Demo001.mts、ts-node Demo001.ts、ts-node Demo001.cts输出如下：
Start1
Start2
Start3
Start4
Fun4
Fun5
Fun6
Promise1
Promise2
Fun2
Fun3
Fun1

执行ts-node-esm Demo001.ts、ts-node-esm Demo001.cts、ts-node-esm Demo001.mts输出如下：
PS：ts-node --esm ===> ts-node-esm ===> node --loader ts-node/esm
Start1
Start2
Start3
Start4
Promise1
Promise2
Fun4
Fun5
Fun6
Fun2
Fun3
Fun1
