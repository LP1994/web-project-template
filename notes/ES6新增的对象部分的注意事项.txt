1、
简写的对象方法，不能当作构造函数使用。
PS：
const obj = {
  f() {
    this.foo = 'bar';
  }
};
new obj.f() // 报错



2、
属性的遍历
ES6 一共有 5 种方法可以遍历对象的属性。
PS：
Symbol作为属性名，遍历对象的时候，该属性不会出现在for...in、for...of循环中，
也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。

（1）for...in

for...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。

（2）Object.keys(obj)

Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。

（3）Object.getOwnPropertyNames(obj)

Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。

（4）Object.getOwnPropertySymbols(obj)

Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。

（5）Reflect.ownKeys(obj)

Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。

以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。

首先遍历所有数值键，按照数值升序排列。
其次遍历所有字符串键，按照加入时间升序排列。
最后遍历所有 Symbol 键，按照加入时间升序排列。



3、
ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象。(目前，只有对象方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。)
PS：
super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。
// 报错
const obj = {
  foo: super.foo
}
// 报错
const obj = {
  foo: () => super.foo
}
// 报错
const obj = {
  foo: function () {
    return super.foo
  }
}
super.foo等同于Object.getPrototypeOf(this).foo（属性）或Object.getPrototypeOf(this).foo.call(this)（方法）。
const proto = {
  x: 'hello',
  foo() {
    console.log(this.x);
  },
};
const obj = {
  x: 'world',
  foo() {
    super.foo();
  }
}
Object.setPrototypeOf(obj, proto);
obj.foo() // "world"



4、
对象的扩展运算符（...）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。
扩展运算符的参数对象之中，如果有取值函数get，这个函数是会执行的。



5、
链判断运算符( ?. )
链判断运算符有三种用法：
obj?.prop // 对象属性
obj?.[expr] // 同上
func?.(...args) // 函数或对象方法的调用

以下写法是禁止的，会报错：
// 构造函数
new a?.()
new a?.b()
// 链判断运算符的右侧有模板字符串
a?.`{b}`
a?.b`{c}`
// 链判断运算符的左侧是 super
super?.()
super?.foo
// 链运算符用于赋值运算符左侧
a?.b = c

右侧不得为十进制数值：
为了保证兼容以前的代码，允许foo?.3:0被解析成foo ? .3 : 0，因此规定如果?.后面紧跟一个十进制数字，
那么?.不再被看成是一个完整的运算符，而会按照三元运算符进行处理，也就是说，那个小数点会归属于后面的十进制数字，形成一个小数。



6、
Proxy-实例的方法：ownKeys()
ownKeys方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作：
Object.getOwnPropertyNames()
Object.getOwnPropertySymbols()
Object.keys()
for...in循环

PS：
使用Object.getOwnPropertySymbols()、Object.keys()、for...in循环等三个方法时，有三类属性会被ownKeys方法自动过滤，不会返回。
目标对象上不存在的属性
属性名为 Symbol 值
不可遍历（enumerable）的属性
但是，Object.getOwnPropertyNames()不会过滤！！！



7、
