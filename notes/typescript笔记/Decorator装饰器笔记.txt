截至2024年04月22日，装饰器（Decorator）语法提案处于第3阶段！相比旧版的语法提案，第3阶段的语法提案有很大的变化！
详细见：
https://github.com/tc39/proposal-decorators
https://www.bookstack.cn/read/wangdoc-typescript-tutorial/docs-decorator.md



装饰器（Decorator）是一种语法结构，用来在定义时修改类（class）的行为。

在语法上，装饰器有如下几个特征。

（1）第一个字符（或者说前缀）是@，后面是一个表达式。

（2）@后面的表达式，必须是一个函数（或者执行后可以得到一个函数）。

（3）这个函数接受所修饰对象的一些相关值作为参数。

（4）这个函数要么不返回值，要么返回一个新对象取代所修饰的目标对象。



装饰器函数的类型定义如下。
type Decorator = (
  value: DecoratedValue,
  context: {
    kind: string;
    name: string | symbol;
    addInitializer?(initializer: () => void): void;
    static?: boolean;
    private?: boolean;
    access: {
      get?(): unknown;
      set?(value: unknown): void;
    };
  }
) => void | ReplacementValue;
上面代码中，Decorator是装饰器的类型定义。它是一个函数，使用时会接收到value和context两个参数。
value：所装饰的对象。
context：上下文对象，TypeScript 提供一个原生接口ClassMethodDecoratorContext，描述这个对象。

context对象的属性，根据所装饰对象的不同而不同，其中只有两个属性（kind和name）是必有的，其他都是可选的。

（1）kind：字符串，表示所装饰对象的类型，可能取以下的值。
‘class’
‘method’
‘getter’
‘setter’
‘field’
‘accessor’
这表示一共有六种类型的装饰器。

（2）name：字符串或者 Symbol 值，所装饰对象的名字，比如类名、属性名等。

（3）addInitializer()：函数，用来添加类的初始化逻辑。以前，这些逻辑通常放在构造函数里面，对方法进行初始化，现在改成以函数形式传入addInitializer()方法。
注意，addInitializer()没有返回值。
它的运行时间如下：
类装饰器：在类被完全定义之后。
方法装饰器：在类构造期间运行，在属性初始化之前。
静态方法装饰器：在类定义期间运行，早于静态属性定义，但晚于类方法的定义。

（4）private：布尔值，表示所装饰的对象是否为类的私有成员。

（5）static：布尔值，表示所装饰的对象是否为类的静态成员。

（6）access：一个对象，包含了某个值的 get 和 set 方法。



方法装饰器
type ClassMethodDecorator = (
  value: Function,
  context: {
    kind: 'method';
    name: string | symbol;
    static: boolean;
    private: boolean;
    access: { get: () => unknown };
    addInitializer(initializer: () => void): void;
  }
) => Function | void;
参数value是方法本身
如果方法装饰器返回一个新的函数，就会替代所装饰的原始函数。



属性装饰器
type ClassFieldDecorator = (
  value: undefined,
  context: {
    kind: 'field';
    name: string | symbol;
    static: boolean;
    private: boolean;
    access: { get: () => unknown, set: (value: unknown) => void };
    addInitializer(initializer: () => void): void;
  }
) => (initialValue: unknown) => unknown | void;
注意，装饰器的第一个参数value的类型是undefined，这意味着这个参数实际上没用的，装饰器不能从value获取所装饰属性的值。
属性装饰器要么不返回值，要么返回一个函数，该函数会自动执行，用来对所装饰属性进行初始化。该函数的参数是所装饰属性的初始值，该函数的返回值是该属性的最终值。



getter 装饰器
type ClassGetterDecorator = (
  value: Function,
  context: {
    kind: 'getter';
    name: string | symbol;
    static: boolean;
    private: boolean;
    access: { get: () => unknown };
    addInitializer(initializer: () => void): void;
  }
) => Function | void;
注意，getter 装饰器的上下文对象context的access属性，只包含get()方法。
这个装饰器要么不返回值，要么返回一个函数，取代原来的取值器或存值器。



setter 装饰器
type ClassSetterDecorator = (
  value: Function,
  context: {
    kind: 'setter';
    name: string | symbol;
    static: boolean;
    private: boolean;
    access: { set: (value: unknown) => void };
    addInitializer(initializer: () => void): void;
  }
) => Function | void;
注意，setter 装饰器的access属性，只包含set()方法。
这个装饰器要么不返回值，要么返回一个函数，取代原来的取值器或存值器。



accessor 装饰器
accessor修饰符等同于为属性x自动生成取值器和存值器，它们作用于私有属性x。
例子：
class C {
  accessor x = 1;
}
等同于：
class C {
  #x = 1;

  get x() {
    return this.#x;
  }

  set x(val) {
    this.#x = val;
  }
}

accessor 装饰器的类型如下：
type ClassAutoAccessorDecorator = (
  value: {
    get: () => unknown;
    set(value: unknown) => void;
  },
  context: {
    kind: "accessor";
    name: string | symbol;
    access: { get(): unknown, set(value: unknown): void };
    static: boolean;
    private: boolean;
    addInitializer(initializer: () => void): void;
  }
) => {
  get?: () => unknown;
  set?: (value: unknown) => void;
  init?: (initialValue: unknown) => unknown;
} | void;
accessor 装饰器的value参数，是一个包含get()方法和set()方法的对象。
该装饰器可以不返回值，或者返回一个新的对象，用来取代原来的get()方法和set()方法。
此外，装饰器返回的对象还可以包括一个init()方法，用来改变私有属性的初始值。
