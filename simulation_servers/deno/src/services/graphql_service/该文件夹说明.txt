该文件夹是用于响应“GraphQL请求”（POST请求、GET请求），如：
POST（服务端使用graphql-http实现，graphql-http有对应的客户端实现）：https://127.0.0.1:9200/graphql

GET（服务端使用graphql-http实现，但是GET请求不支持“mutation”操作，graphql-http有对应的客户端实现）：https://127.0.0.1:9200/graphql?query=query%20Test001%7B%0A%20%20%20%20hello1:%20hello,%0A%7D%0A%0Aquery%20Test002%7B%0A%20%20%20%20serverDate1:%20serverDate,%0A%7D&variables={}&operationName=Test001
例子：
为了避免特殊字符的编码错误，最好是要先使用encodeURI处理一下“GraphQL查询”，如：
encodeURI(`query Test001{
    hello1: hello,
}

query Test002{
    serverDate1: serverDate,
}`);
处理完就成了这样：
query%20Test001%7B%0A%20%20%20%20hello1:%20hello,%0A%7D%0A%0Aquery%20Test002%7B%0A%20%20%20%20serverDate1:%20serverDate,%0A%7D

var myHeaders = new Headers();
myHeaders.append("Accept", "application/json");
myHeaders.append("Cache-Control", "no-cache");
myHeaders.append("User-Agent", "Apifox/1.0.0 (https://apifox.com)");
myHeaders.append("Host", "127.0.0.1:9200");
myHeaders.append("Connection", "keep-alive");

var requestOptions = {
   method: 'GET',
   headers: myHeaders,
   redirect: 'follow'
};

fetch("https://127.0.0.1:9200/graphql?query=query%20Test001%7B%0A%20%20%20%20hello1:%20hello,%0A%7D%0A%0Aquery%20Test002%7B%0A%20%20%20%20serverDate1:%20serverDate,%0A%7D&variables={}&operationName=Test001", requestOptions)
   .then(response => response.text())
   .then(result => console.log(result))
   .catch(error => console.log('error', error));

成功！完美！

Websocket（服务端使用graphql-ws实现，graphql-ws有对应的客户端实现）：
wss://127.0.0.1:9200/graphql
wss://127.0.0.1:4000/graphql/
wss://127.0.0.1:9200/graphql/subscriptions
wss://127.0.0.1:9200/graphql/subscriptions/

SSE（服务端使用graphql-sse实现，该工具支持：PUT、DELETE、POST、GET这4个类型的请求，graphql-sse有对应的客户端实现）：
https://127.0.0.1:9200/graphql/stream



如：
https://127.0.0.1:9200/graphql

deno关于使用GraphQL的deno官方案例：
https://docs.deno.com/runtime/manual/basics/connecting_to_databases#server

GraphQL官方教程：
https://graphql.org/graphql-js/

graphql-http中关于在deno里使用GraphQL的案例：
https://github.com/graphql/graphql-http?tab=readme-ov-file#with-deno