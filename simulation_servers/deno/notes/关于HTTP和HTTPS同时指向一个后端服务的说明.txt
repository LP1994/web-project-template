一、关于hosts文件修改的
当在C:\Windows\System32\drivers\etc\hosts文件中添加如下：
127.0.0.1         lmf2024a.mynatapp.cc
127.0.0.1         lmf2024a.natapp1.cc
保存后，在命令行中执行刷新DNS命令“ipconfig /flushdns”后，
请求
http://lmf2024a.mynatapp.cc
https://lmf2024a.mynatapp.cc
http://lmf2024a.natapp1.cc
都会被本地DNS解析到本地服务“127.0.0.1”上。
请求时可以加上端口号：
http://lmf2024a.mynatapp.cc:9000
https://lmf2024a.mynatapp.cc:9200
http://lmf2024a.natapp1.cc:9000
都会被本地DNS解析到本地服务“127.0.0.1:9000”、“127.0.0.1:9200”上。



二、关于natapp的
1、只有域名“lmf2024a.mynatapp.cc”能启用HTTPS协议（自然也就能同时支持HTTP协议了），域名“lmf2024a.natapp1.cc”只能使用HTTP协议。
2、可用的外网连接如下：
http://lmf2024a.mynatapp.cc
https://lmf2024a.mynatapp.cc
http://lmf2024a.natapp1.cc
3、关于https://lmf2024a.mynatapp.cc的请求走向过程大致是这样的：
HTTPS请求先到了本地启用了的“natapp.exe”上，跟“natapp.exe”完成了貌似“TLS握手”的操作，个人估计是natapp为HTTPS请求提供的HTTPS证书跟“natapp.exe”有互相校验、认证的，类似经过安全校验之类的。
然后将解密的数据再通过请求“http://lmf2024a.mynatapp.cc”又指向本地服务器的HTTP服务上，来最终完成一次HTTPS请求。
官方解释详细见：
https://natapp.cn/article/https
如其natapp官方自己所言，本地服务器只要提供HTTP的服务即可，natapp就能同时支持HTTP和HTTPS的请求。
PS：
这就意味着，如果本地服务器主要是提供HTTPS的服务，那么最好还是同时再开一个其他端口的HTTP服务了。
并将natapp的配置中的端口指向这个本地服务器提供HTTP服务的端口上即可。
这就能做到在同一个域名的情况下，又同时支持HTTP和HTTPS两个协议的请求，如：
http://lmf2024a.mynatapp.cc、https://lmf2024a.mynatapp.cc
都能指向本地服务：http://127.0.0.1:9000



三、关于nginx的
1、命令行查看是不是有“nginx.exe”在运行的命令：tasklist /fi "imagename eq nginx.exe"
2、检查“nginx”的配置是不是成功有效的：nginx -t，在“D:\Nginx\App”目录下执行。
3、关闭“nginx”：nginx.exe -s quit（这种还是不能全部终止，再用上“taskkill /F /IM nginx.exe /T”即可终止所有的nginx进程），在“D:\Nginx\App”目录下执行。
4、启动“nginx”：start nginx，在“D:\Nginx\App”目录下执行。
5、通过同一个端口提供HTTP和HTTPS两种协议，并分别指向本地服务的不同服务的nginx配置写法：
#user  nobody;
worker_processes  32;

events {
    worker_connections  102400;
}

stream {
    upstream http_backend {
        server localhost:9000;
    }

    upstream https_backend {
        server localhost:9200;
    }

    map $ssl_preread_protocol $upstream {
        default http_backend;
        "TLSv1.0" https_backend;
        "TLSv1.1" https_backend;
        "TLSv1.2" https_backend;
        "TLSv1.3" https_backend;
    }

    server {
        listen 8999;
        ssl_preread on;
        // proxy_pass：代理到某某本地服务。
        proxy_pass $upstream;
    }
}
启用如上配置的nginx后，在浏览器上访问：
http://127.0.0.1:8999、https://127.0.0.1:8999
能自动根据浏览器请求是哪个协议的请求，并自动将它指向对应的本地服务器提供的对应协议的服务上。
如，浏览器发起http://127.0.0.1:8999请求，经过nginx的处理后，指向了本地服务“http://localhost:9000”
如，浏览器发起https://127.0.0.1:8999请求，经过nginx的处理后，指向了本地服务“https://localhost:9200”

关于nginx的其他配置写法：
HTTP服务器块：
server {
    listen 80;
    server_name localhost;
     // 重定向的
    # return 301 https://$server_name$request_uri;

    // 当浏览器请求http://localhost:80时，nginx会将其代理到本地服务“http://localhost:9000”上。
		location / {
		      proxy_pass   http://localhost:9000;
		}
}
HTTPS服务器块：
server {
    // 提供HTTP/2服务的HTTPS！
    listen 443 ssl http2;
    server_name localhost;

    ssl_certificate D://Nginx//App//conf//HTTPSSL001_Servers_CA.crt;
    ssl_certificate_key D://Nginx//App//conf//HTTPSSL001_Root_CA_Key.key;

    # SSL配置
    ssl_session_timeout 1d;
    # 使用Mozilla的SSL配置
    ssl_session_cache shared:MozSSL:10m;
    ssl_session_tickets off;

    # 现代加密套件
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;

    # HSTS (可选)
    # add_header Strict-Transport-Security "max-age=63072000" always;
}
