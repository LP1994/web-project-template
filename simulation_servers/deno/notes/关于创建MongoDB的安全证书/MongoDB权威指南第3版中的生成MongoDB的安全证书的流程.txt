MongoDB权威指南第3版中的生成HTTPS证书的流程



第1步生成“私钥”：MongoDBRootCAKey.key
在“生产环境”中，需要对“私钥，MongoDBRootCAKey.key”进行加密保护：
openssl genrsa -aes256 -out MongoDBRootCAKey.key 4096
执行输出：
Enter PEM pass phrase: @MongoDBRootCA.2022001A#
Verifying - Enter PEM pass phrase: @MongoDBRootCA.2022001A#



第2步生成“根证书/根CA”：MongoDBRootCA.crt
使用openssl req命令来创建“根证书/根CA，MongoDBRootCA.crt”。由于“根证书/根CA，MongoDBRootCA.crt”是权威链的最顶端，因此使用上一步创建的“私钥，MongoDBRootCAKey.key”对此“根证书/根CA，MongoDBRootCA.crt”进行自签名。-x509选项会通知openssl req命令我们希望使用提供给-key选项的“私钥，MongoDBRootCAKey.key”对“根证书/根CA，MongoDBRootCA.crt”进行自签名。输出是一个名为MongoDBRootCA.crt的“根证书/根CA，MongoDBRootCA.crt”文件：
openssl req -new -x509 -days 365 -key MongoDBRootCAKey.key -out MongoDBRootCA.crt -config openssl.cnf
执行输出：
Enter pass phrase for MongoDBRootCAKey.key:@MongoDBRootCA.2022001A#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDB2022001]:MongoDBRootCA2022001
Organizational Unit Name (eg, section) [MongoDB001]:MongoDBRootCA001
Common Name (e.g. server FQDN or YOUR name) []:MongoDBRootCA2022001
Email Address []:1227839175@qq.com



如果看一下“根证书/根CA，MongoDBRootCA.crt”文件，你会发现它包含了“根证书/根CA，MongoDBRootCA.crt”的公共证书。可以查看由以下命令
生成的一个可读版本来验证其内容：
openssl x509 -noout -text -in MongoDBRootCA.crt
输出：
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            48:88:c2:c1:36:8e:60:16:bf:46:99:6c:71:84:19:ba:55:12:2f:b3
        Signature Algorithm: sha512WithRSAEncryption
        Issuer: C = CN, ST = GuangDong, L = ShenZhen, O = MongoDBRootCA2022001, OU = MongoDBRootCA001, CN = MongoDBRootCA2022001, emailAddress = 1227839175@qq.com
        Validity
            Not Before: Dec  4 18:42:10 2022 GMT
            Not After : Dec  4 18:42:10 2023 GMT
        Subject: C = CN, ST = GuangDong, L = ShenZhen, O = MongoDBRootCA2022001, OU = MongoDBRootCA001, CN = MongoDBRootCA2022001, emailAddress = 1227839175@qq.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:85:34:40:b9:74:74:be:60:1e:c0:1e:71:71:9e:
                    2a:ce:eb:80:3a:69:25:b7:1f:2d:73:26:f2:f3:cd:
                    a3:ea:14:e5:ee:ec:61:28:c6:e6:8d:24:30:34:82:
                    c6:00:d4:74:1b:e6:d8:58:d6:a0:56:b1:c3:ff:43:
                    0f:dc:e7:f1:51:06:a1:30:31:e3:9c:a9:4b:32:68:
                    b3:66:dc:ee:c6:63:a4:e4:18:ad:c3:f0:44:91:3c:
                    02:0b:08:c2:fe:ea:61:54:21:fe:04:26:99:fe:71:
                    bf:9b:44:f3:d6:b8:13:3f:48:e9:26:c3:8a:7e:44:
                    2a:20:c6:1a:af:b2:59:82:15:cd:3f:3c:16:b6:82:
                    aa:ae:6a:fb:73:34:99:91:9c:71:d6:94:2e:67:17:
                    9b:e9:d3:de:f5:9a:2c:e9:ab:68:45:35:38:9d:40:
                    23:a2:7a:35:35:25:47:f4:19:33:c3:73:1a:87:0f:
                    06:a2:1e:48:4f:28:a2:14:98:26:2d:86:c8:7f:ce:
                    73:f7:31:cb:73:ff:7b:20:95:87:7d:e6:c9:cf:f5:
                    88:37:ef:e2:47:43:76:ca:e5:87:85:03:93:9c:1a:
                    53:9a:aa:70:cd:66:f6:d5:84:e3:23:87:f2:68:ba:
                    10:af:43:21:6f:2c:e8:30:40:58:b4:bf:8f:f9:e1:
                    e5:d8:78:c6:07:ce:f9:10:c8:d0:79:97:b2:87:97:
                    66:d5:d1:c5:c7:63:0b:38:e2:29:2d:68:67:bb:4c:
                    8f:eb:63:87:8f:60:9f:28:fa:db:d8:e4:f3:6a:32:
                    b3:3c:55:b8:50:cf:24:40:f4:f2:45:33:eb:0e:f0:
                    01:4c:bc:29:24:29:df:31:6d:bf:6f:55:3f:e3:9f:
                    df:9b:06:a8:ca:7a:b9:3c:9d:ee:e8:8b:65:4f:45:
                    17:9e:42:66:97:9f:96:c6:01:04:6a:c8:a5:ad:bc:
                    1e:68:90:9c:be:be:75:59:0f:51:6c:53:98:f1:1c:
                    3d:14:4d:2a:13:62:a5:10:0d:a8:d3:dc:39:74:5a:
                    dc:e4:25:8b:01:35:83:a8:f9:77:d1:b5:31:f9:99:
                    0c:c1:5c:42:fc:a5:83:cf:4d:33:0f:3e:12:55:d0:
                    2b:f8:49:51:a6:45:74:4f:44:ec:5a:55:2c:3f:38:
                    dc:5f:05:52:09:37:2d:d3:51:7f:c4:e0:8b:ab:26:
                    83:89:0b:a5:f7:58:cb:89:ba:7b:84:11:29:b5:2e:
                    a5:95:5a:b0:fc:fc:5a:4b:dd:8a:72:e1:4d:22:9b:
                    ed:cb:cc:2e:cc:0c:29:3e:32:14:ff:6b:44:31:d2:
                    de:8c:01:91:4e:47:bf:df:96:5e:30:9d:6b:32:be:
                    1b:3b:dd
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                B8:0D:81:40:53:7A:30:32:1C:26:2B:77:EB:72:F2:CB:23:74:64:49
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Authority Key Identifier:
                keyid:B8:0D:81:40:53:7A:30:32:1C:26:2B:77:EB:72:F2:CB:23:74:64:49
                DirName:/C=CN/ST=GuangDong/L=ShenZhen/O=MongoDBRootCA2022001/OU=MongoDBRootCA001/CN=MongoDBRootCA2022001/emailAddress=1227839175@qq.com
                serial:48:88:C2:C1:36:8E:60:16:BF:46:99:6C:71:84:19:BA:55:12:2F:B3
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
    Signature Algorithm: sha512WithRSAEncryption
    Signature Value:
        6d:a0:bd:e6:75:86:85:27:5b:65:3e:61:3b:be:a4:bb:7d:ab:
        28:a0:70:b5:ab:89:00:1f:e8:43:ab:f8:be:0f:25:a9:d4:5b:
        48:44:d1:af:35:9d:40:ec:77:7c:9a:31:d8:ad:b7:e9:ae:8b:
        6b:17:5f:21:bc:92:f1:3b:cd:c2:f3:d0:5b:b4:be:cd:69:f8:
        22:52:2e:c3:d1:f7:23:bc:80:9b:48:68:be:bc:e6:b4:4a:7d:
        09:41:99:95:e9:48:b6:62:22:03:ed:f4:7b:82:ef:ef:e0:57:
        ad:f8:89:70:e5:36:a8:3b:93:bb:26:30:7d:59:cf:9b:2f:af:
        ed:cf:63:e7:0b:c2:ed:37:b9:f7:0d:39:43:49:60:d4:da:57:
        6a:43:28:14:65:ad:8c:fb:ed:b0:6d:fb:fa:c8:50:76:32:49:
        d5:e5:57:55:94:98:86:3d:c5:da:dd:aa:db:37:a2:dd:50:b6:
        06:c2:ab:d9:70:18:8b:23:3f:21:a3:77:82:ab:ab:4d:e1:b5:
        1a:9b:c5:0d:4a:5a:1c:75:6b:28:39:a5:8c:ea:36:46:27:80:
        1f:45:62:85:25:17:3e:33:c9:e8:7c:cc:1d:d6:41:1c:92:00:
        d7:b7:81:fa:a4:ad:47:4f:a3:69:40:02:c7:31:76:d9:91:7c:
        08:74:be:bb:51:c6:78:2c:24:55:84:5d:82:49:9b:48:d4:cc:
        fb:bb:82:0e:fd:63:3a:53:5f:bd:52:35:4e:b5:d7:ad:22:88:
        fd:f6:5c:ff:46:98:e7:83:35:b8:6e:11:b3:8a:3b:6c:60:93:
        ca:dc:90:84:3e:47:23:2b:96:c5:33:5a:01:cd:ae:42:4e:bf:
        dd:bd:03:4c:74:f9:d1:d2:bf:0e:cb:00:8e:dc:5c:d8:9e:9c:
        f2:94:11:68:06:c3:86:c2:15:85:01:60:63:03:b4:ed:42:f0:
        08:ed:0e:2c:41:68:d8:4f:5a:d2:16:95:8a:b7:06:cd:07:39:
        00:e1:48:4e:c0:31:86:eb:81:b7:73:74:5a:13:42:72:29:5c:
        3a:ae:d4:ed:23:6c:36:fe:1c:a2:48:09:91:ba:82:91:b8:bb:
        cd:33:1c:6e:bd:d5:af:6b:7c:e1:98:4e:a5:2f:fe:c2:3b:09:
        ac:54:2e:3f:b8:b1:24:83:24:e3:17:c0:f2:10:46:fb:24:85:
        13:57:47:02:77:0a:55:4d:ad:4f:4e:f2:cc:61:dd:23:41:0e:
        ba:27:b8:da:f3:11:b7:f7:3d:71:47:b1:f1:36:fe:88:ef:44:
        65:a3:00:10:54:4b:89:e0:db:b5:fd:5b:a1:ed:2b:69:96:ac:
        73:ad:47:ed:b2:6a:84:17



第3步根据上面的第2步创建的“根证书/根CA，MongoDBRootCA.crt”再一次创建用于对“成员证书”和“客户端证书”进行签名的“中间签名CA，MongoDBMiddlemanSigningCA.crt”：
1）先再次生成一个“私钥，MongoDBMiddlemanSigningCAKey.key”：
在“生产环境”中，需要对“私钥，MongoDBMiddlemanSigningCAKey.key”进行加密保护：
openssl genrsa -aes256 -out MongoDBMiddlemanSigningCAKey.key 4096
执行输出：
Enter PEM pass phrase: @MongoDBMiddlemanSigningCA.2022001A#
Verifying - Enter PEM pass phrase: @MongoDBMiddlemanSigningCA.2022001A#

2）再执行：
openssl req -new -key MongoDBMiddlemanSigningCAKey.key -out MongoDBMiddlemanSigningCA.csr -config openssl.cnf
执行输出：
Enter pass phrase for MongoDBMiddlemanSigningCAKey.key:@MongoDBMiddlemanSigningCA.2022001A#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDB2022001]:MongoDBMiddlemanSigningCA2022001
Organizational Unit Name (eg, section) [MongoDB001]:MongoDBMiddlemanSigningCA001
Common Name (e.g. server FQDN or YOUR name) []:MongoDBMiddlemanSigningCA2022001
Email Address []:1227839175@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:20220101
An optional company name []:MongoDBMiddlemanSigningCA2022001

3）最后执行：
openssl x509 -req -days 365 -in MongoDBMiddlemanSigningCA.csr -CA MongoDBRootCA.crt -CAkey MongoDBRootCAKey.key -set_serial 01 -out MongoDBMiddlemanSigningCA.crt -extfile openssl.cnf -extensions v3_ca
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = MongoDBMiddlemanSigningCA2022001, OU = MongoDBMiddlemanSigningCA001, CN = MongoDBMiddlemanSigningCA2022001, emailAddress = 1227839175@qq.com
Enter pass phrase for MongoDBRootCAKey.key:@MongoDBRootCA.2022001A#



第4步：MongoDBRootCA.pem
需要将“根证书/根CA，MongoDBRootCA.crt”（包含根公钥）和“中间签名CA，MongoDBMiddlemanSigningCA.crt”（包含签名公钥）
连接到一个“pem文件（MongoDBRootCA.pem）”中。这个文件（MongoDBRootCA.pem）稍后将作为“--tlsCAFile”选项的值提供给“mongod”或“客户端进程”。
1）先执行：
type MongoDBRootCA.crt > MongoDBRootCA.pem
2）再执行：
type MongoDBMiddlemanSigningCA.crt >> MongoDBRootCA.pem



创建用于“MongoDB集群”中身份验证的“成员证书/x.509服务器证书”（可以有多个）和“客户端证书”（可以有多个）。



第5步：“成员证书/x.509服务器证书”，可以有多个，现在假定只创建一个“MongoDBServers_192_168_10_101_CA.crt”。
“成员证书”通常称为“x.509服务器证书”。应该对“mongod进程”和“mongos进程”使用该类型的证书（成员证书）。
“MongoDB集群成员”会使用这些证书（成员证书/x.509服务器证书）来验证集群中的“成员身份”。换句话说，“mongod”就是用“成员证书/x.509服务器证书”来为“副本集的其他成员”提供“身份验证”的。
1）创建新的“私钥，MongoDBServers_192_168_10_101_Key.key”：
Windows不支持加密的key，加密会导致MongoDB无法启动：
openssl genrsa -out MongoDBServers_192_168_10_101_Key.key 4096

2）为“私钥，MongoDBServers_192_168_10_101_Key.key”生成“成员证书的签名请求，MongoDBServers_192_168_10_101.csr”：
openssl req -new -key MongoDBServers_192_168_10_101_Key.key -out MongoDBServers_192_168_10_101.csr -config openssl.cnf
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDB2022001]:MongoDBServers_192_168_10_101_001
Organizational Unit Name (eg, section) [MongoDB001]:MongoDBServers_192_168_10_101
Common Name (e.g. server FQDN or YOUR name) []:192.168.10.101
Email Address []:1227839175@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:20220101001
An optional company name []:MongoDBServers_192_168_10_101_001

3）通过“中间签名CA，MongoDBMiddlemanSigningCA.crt”对“成员证书”进行签名：
openssl x509 -req -days 365 -in MongoDBServers_192_168_10_101.csr -CA MongoDBMiddlemanSigningCA.crt -CAkey MongoDBMiddlemanSigningCAKey.key -CAcreateserial -out MongoDBServers_192_168_10_101_CA.crt -extfile openssl.cnf -extensions v3_req
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = MongoDBServers_192_168_10_101_001, OU = MongoDBServers_192_168_10_101, CN = 192.168.10.101, emailAddress = 1227839175@qq.com
Enter pass phrase for MongoDBMiddlemanSigningCAKey.key:@MongoDBMiddlemanSigningCA.2022001A#

4）：
type MongoDBServers_192_168_10_101_CA.crt > MongoDBServers_192_168_10_101.pem

5）：
type MongoDBServers_192_168_10_101_Key.key >> MongoDBServers_192_168_10_101.pem



第6步：“客户端证书”，可以有多个，现在假定只创建一个“MongoDBClients_192_168_10_101_CA.crt”。
“客户端证书”用于“mongo shell”、“MongoDB Compass”、“MongoDB实用程序”和“工具”、“MongoDB驱动的应用程序”。
生成“客户端证书”的过程与生成“成员证书/x.509服务器证书”的过程基
本相同，唯一的区别是要确保O（Organization Name）、OU（Organizational Unit）和DC值的组合与上面生成的“成员证书/x.509服务器证书”不同。
1）：
Windows不支持加密的key，加密会导致MongoDB无法启动：
openssl genrsa -out MongoDBClients_192_168_10_101_Key.key 4096

2）：
openssl req -new -key MongoDBClients_192_168_10_101_Key.key -out MongoDBClients_192_168_10_101.csr -config openssl.cnf
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDB2022001]:MongoDBClients_192_168_10_101_001
Organizational Unit Name (eg, section) [MongoDB001]:MongoDBClients_192_168_10_101
Common Name (e.g. server FQDN or YOUR name) []:192.168.10.101
Email Address []:1227839175@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:20220101100
An optional company name []:MongoDBClients_192_168_10_101_001

3）：
openssl x509 -req -days 365 -in MongoDBClients_192_168_10_101.csr -CA MongoDBMiddlemanSigningCA.crt -CAkey MongoDBMiddlemanSigningCAKey.key -CAcreateserial -out MongoDBClients_192_168_10_101_CA.crt -extfile openssl.cnf -extensions v3_req
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = MongoDBClients_192_168_10_101_001, OU = MongoDBClients_192_168_10_101, CN = 192.168.10.101, emailAddress = 1227839175@qq.com
Enter pass phrase for MongoDBMiddlemanSigningCAKey.key:@MongoDBMiddlemanSigningCA.2022001A#

4）：
type MongoDBClients_192_168_10_101_CA.crt > MongoDBClients_192_168_10_101.pem

5）：
type MongoDBClients_192_168_10_101_Key.key >> MongoDBClients_192_168_10_101.pem



使用：
1、命令行中启动MongodDB：
mongod --config D:\MongoDB\App\bin\mongod.cfg

2、命令行中使用mongosh连接MongodDB数据库：
mongosh --port 27777 --tls --tlsCertificateKeyFile D:\MongoDB\App\bin\MongoDBClients_192_168_10_101.pem --tlsCAFile D:\MongoDB\App\bin\MongoDBRootCA.pem