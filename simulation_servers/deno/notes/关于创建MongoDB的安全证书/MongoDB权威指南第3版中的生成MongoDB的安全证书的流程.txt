MongoDB权威指南第3版中的生成MongoDB的安全证书的流程



第1步生成“私钥”：MongoDBRootCAKey.key
在“生产环境”中，需要对“私钥，MongoDBRootCAKey.key”进行加密保护：
openssl genrsa -aes256 -out MongoDBRootCAKey.key 4096
执行输出：
Enter PEM pass phrase: @MongoDBRootCA.2022001A#
Verifying - Enter PEM pass phrase: @MongoDBRootCA.2022001A#



第2步生成“根证书/根CA”：MongoDBRootCA.crt
使用openssl req命令来创建“根证书/根CA，MongoDBRootCA.crt”。由于“根证书/根CA，MongoDBRootCA.crt”是权威链的最顶端，因此使用上一步创建的“私钥，MongoDBRootCAKey.key”对此“根证书/根CA，MongoDBRootCA.crt”进行自签名。-x509选项会通知openssl req命令我们希望使用提供给-key选项的“私钥，MongoDBRootCAKey.key”对“根证书/根CA，MongoDBRootCA.crt”进行自签名。输出是一个名为MongoDBRootCA.crt的“根证书/根CA，MongoDBRootCA.crt”文件：
openssl req -new -x509 -days 365 -key MongoDBRootCAKey.key -out MongoDBRootCA.crt -config openssl.cnf
执行输出：
Enter pass phrase for MongoDBRootCAKey.key:@MongoDBRootCA.2022001A#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDB2022001]:MongoDB2022001
Organizational Unit Name (eg, section) [MongoDB001]:MongoDB001
Common Name (e.g. server FQDN or YOUR name) []:MongoDBRootCA
Email Address []:1227839175@qq.com



如果看一下“根证书/根CA，MongoDBRootCA.crt”文件，你会发现它包含了“根证书/根CA，MongoDBRootCA.crt”的公共证书。可以查看由以下命令
生成的一个可读版本来验证其内容：
openssl x509 -noout -text -in MongoDBRootCA.crt
输出：
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            3c:81:94:af:56:68:81:ed:55:88:80:2c:0c:b4:16:07:2c:c2:1d:8c
        Signature Algorithm: sha512WithRSAEncryption
        Issuer: C = CN, ST = GuangDong, L = ShenZhen, O = MongoDB2022001, OU = MongoDB001, CN = MongoDBRootCA, emailAddress = 1227839175@qq.com
        Validity
            Not Before: Dec  4 10:42:17 2022 GMT
            Not After : Dec  4 10:42:17 2023 GMT
        Subject: C = CN, ST = GuangDong, L = ShenZhen, O = MongoDB2022001, OU = MongoDB001, CN = MongoDBRootCA, emailAddress = 1227839175@qq.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:c0:a3:05:2a:92:bc:34:17:d5:22:f0:01:c1:83:
                    55:eb:ad:97:06:ed:0b:3a:33:2c:c7:24:c6:c5:58:
                    f9:d6:b5:6c:da:7f:07:6d:b5:71:9e:15:f2:e9:ff:
                    15:f0:b7:a1:8e:a8:51:11:03:84:ed:7c:69:e8:bd:
                    33:57:15:f8:72:99:12:8f:97:93:5a:78:d9:74:9f:
                    b2:1c:29:1d:d2:3d:3d:30:57:43:e8:dc:55:92:36:
                    88:5b:a7:a4:4e:47:4d:d5:5a:20:48:37:34:93:ac:
                    e4:e8:91:44:d5:f3:5c:7b:9a:40:d6:f3:ff:88:96:
                    91:df:53:56:9b:7c:61:62:7b:e8:c4:55:f3:5d:1b:
                    cc:c5:fb:96:75:01:15:28:cc:f1:e3:56:e6:b7:4f:
                    fe:ff:8a:06:ab:8f:a8:09:c2:2b:98:95:44:89:d8:
                    13:8b:25:2d:2e:d7:6e:2f:36:c8:92:9e:27:68:ea:
                    a3:f9:f2:5d:60:fd:d8:9c:d6:e5:64:d6:39:72:97:
                    0a:23:6d:de:71:8c:63:ea:67:c2:f2:25:d5:59:13:
                    e5:7b:54:5f:4e:4f:6c:92:ce:d9:d8:76:19:44:44:
                    57:14:d4:6d:06:db:c9:c2:37:a4:a4:4e:dd:0d:1c:
                    d5:43:bf:5a:32:55:65:df:a0:70:ba:5a:03:9d:a4:
                    50:4d:43:a6:34:45:c6:47:7a:f0:f9:b7:36:c3:b0:
                    36:1f:e3:f9:74:9a:aa:35:28:52:e9:97:40:22:ff:
                    38:b0:7f:63:71:34:94:59:e2:4e:0a:42:08:9b:f2:
                    cb:c1:fc:bb:f2:d3:d9:43:8d:2b:c3:6d:f9:fe:5e:
                    15:67:0e:b1:af:06:e1:3a:ed:fc:bd:fe:5f:7a:e0:
                    14:e4:f3:10:61:c6:92:b3:14:f3:0e:30:00:cc:4c:
                    7c:70:70:a1:6c:ea:c7:71:6d:ea:33:4c:79:84:d3:
                    9e:8f:5b:7e:40:7f:c3:9f:4e:f2:f6:81:98:e7:d5:
                    7a:3b:ce:31:fe:56:5e:61:f4:9f:de:73:50:97:ec:
                    94:6f:ab:0c:78:8e:51:22:19:30:72:e2:cd:0d:50:
                    f7:94:39:78:9b:c8:e5:fd:81:ed:43:f0:43:43:b8:
                    f8:1a:e8:1a:a4:6d:bf:22:10:6a:51:f1:2b:f7:f5:
                    fe:96:60:d1:cd:71:fc:39:86:d9:45:1a:3d:1b:22:
                    9e:f8:57:f0:3c:07:23:36:cf:f4:26:70:fc:dc:bc:
                    32:86:ec:bc:5c:26:ed:91:93:10:6b:2b:55:5f:65:
                    a2:f4:88:22:f2:83:5e:1c:66:91:54:20:68:5a:28:
                    8b:77:8b:db:e1:ff:11:65:e8:6c:a6:eb:8c:54:9f:
                    0d:81:cf
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                D0:19:86:93:A8:C3:5A:F2:DD:73:97:D3:31:19:48:38:7B:91:A1:20
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Authority Key Identifier:
                keyid:D0:19:86:93:A8:C3:5A:F2:DD:73:97:D3:31:19:48:38:7B:91:A1:20
                DirName:/C=CN/ST=GuangDong/L=ShenZhen/O=MongoDB2022001/OU=MongoDB001/CN=MongoDBRootCA/emailAddress=1227839175@qq.com
                serial:3C:81:94:AF:56:68:81:ED:55:88:80:2C:0C:B4:16:07:2C:C2:1D:8C
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
    Signature Algorithm: sha512WithRSAEncryption
    Signature Value:
        66:10:37:e7:21:11:3d:c6:9f:d0:6e:18:d0:a7:59:29:e1:2e:
        23:50:82:3f:92:98:f3:c7:f5:36:48:d5:e5:fb:e6:e0:6c:32:
        8a:53:7f:32:7a:27:a7:86:02:b0:b9:64:c5:59:88:31:30:a0:
        26:0a:34:64:03:9c:dd:05:b7:56:5b:49:15:7c:5b:21:6a:aa:
        13:54:da:b4:de:d9:34:b3:87:e6:df:ea:e7:d4:87:21:57:55:
        05:58:ec:c9:5b:91:de:1a:98:7a:77:e2:12:18:90:60:1e:84:
        35:23:9d:a8:3e:7c:5a:1c:c2:b4:0a:b9:02:58:a3:1a:04:b1:
        fd:77:5f:da:e4:a7:32:da:94:16:61:40:fb:43:45:99:9d:84:
        64:a9:1c:10:e1:fb:70:5b:3e:be:d5:34:a3:92:23:61:9e:bf:
        ba:77:21:e2:e9:76:ea:f9:f1:0d:d2:dc:4d:80:87:8e:80:c1:
        2d:9d:17:6a:10:cb:23:b7:68:1f:0c:28:5b:bc:d3:d1:fb:c0:
        cb:18:6e:e2:f7:23:7d:c5:1b:7b:b0:8f:1a:b4:da:85:b9:33:
        27:58:67:10:6f:35:67:7f:fd:dd:fa:16:c9:65:bd:35:f3:44:
        00:2b:66:a4:20:9c:6d:9e:b3:46:53:61:2a:1a:96:aa:11:6c:
        77:ca:72:f8:67:f6:fb:8f:82:25:e7:56:6e:77:ca:6a:ea:7c:
        50:16:f9:67:d5:3b:ef:64:72:da:d3:b1:ca:bc:89:99:35:2c:
        f4:22:e9:96:4d:a7:c6:8c:c8:90:ff:97:4f:96:55:b9:48:5b:
        d7:ec:7a:34:2f:b9:8f:7c:65:b0:ae:ff:bc:1b:77:ea:c0:49:
        4d:0a:00:88:d0:af:fb:c6:09:a3:e8:11:1f:b4:7c:1e:95:55:
        02:fc:f1:9f:cd:fc:cc:b4:c3:92:73:ea:56:94:28:a0:2d:11:
        39:46:bf:c8:64:57:51:f5:99:ec:20:f2:b1:d8:6d:a5:ba:4d:
        ac:e5:2c:03:17:ed:52:e5:15:d4:73:b2:35:db:d3:65:e7:f2:
        83:2b:63:0a:d5:5a:34:ae:99:aa:a5:8f:55:af:c8:5e:31:4f:
        bb:2e:d9:eb:28:8e:8e:d2:d5:ff:ec:d5:fe:71:ab:18:99:ac:
        5d:8b:37:52:be:bf:82:86:4b:a9:d3:f7:7a:1a:29:ef:f9:12:
        c8:8e:75:0b:2a:32:8b:ec:ee:6f:73:cf:80:83:da:df:39:00:
        a5:79:b6:d6:0d:f2:1a:19:f3:ee:25:51:89:a8:31:f3:fd:28:
        c1:a0:de:a5:ef:b2:3f:b7:d0:a6:b8:67:ac:16:1b:e5:ab:3a:
        d2:d9:ef:32:28:df:9d:72



第3步根据上面的第2步创建的“根证书/根CA，MongoDBRootCA.crt”再一次创建用于对“成员证书”和“客户端证书”进行签名的“中间签名CA，MongoDBMiddlemanSigningCA.crt”：
1）先再次生成一个“私钥，MongoDBMiddlemanSigningCAKey.key”：
在“生产环境”中，需要对“私钥，MongoDBMiddlemanSigningCAKey.key”进行加密保护：
openssl genrsa -aes256 -out MongoDBMiddlemanSigningCAKey.key 4096
执行输出：
Enter PEM pass phrase: @MongoDBMiddlemanSigningCA.2022001A#
Verifying - Enter PEM pass phrase: @MongoDBMiddlemanSigningCA.2022001A#

2）再执行：
openssl req -new -key MongoDBMiddlemanSigningCAKey.key -out MongoDBMiddlemanSigningCA.csr -config openssl.cnf
执行输出：
Enter pass phrase for MongoDBMiddlemanSigningCAKey.key:@MongoDBMiddlemanSigningCA.2022001A#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDB2022001]:MongoDB2022001
Organizational Unit Name (eg, section) [MongoDB001]:MongoDB001
Common Name (e.g. server FQDN or YOUR name) []:MongoDBMiddlemanSigningCA
Email Address []:1227839175@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:20220101
An optional company name []:MongoDB2022001

3）最后执行：
openssl x509 -req -days 365 -in MongoDBMiddlemanSigningCA.csr -CA MongoDBRootCA.crt -CAkey MongoDBRootCAKey.key -set_serial 01 -out MongoDBMiddlemanSigningCA.crt -extfile openssl.cnf -extensions v3_ca
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = MongoDB2022001, OU = MongoDB001, CN = MongoDBMiddlemanSigningCA, emailAddress = 1227839175@qq.com
Enter pass phrase for MongoDBRootCAKey.key:@MongoDBRootCA.2022001A#



第4步：MongoDBRootCA.pem
需要将“根证书/根CA，MongoDBRootCA.crt”（包含根公钥）和“中间签名CA，MongoDBMiddlemanSigningCA.crt”（包含签名公钥）
连接到一个“pem文件（MongoDBRootCA.pem）”中。这个文件（MongoDBRootCA.pem）稍后将作为“--tlsCAFile”选项的值提供给“mongod”或“客户端进程”。
1）先执行：
type MongoDBRootCA.crt > MongoDBRootCA.pem
2）再执行：
type MongoDBMiddlemanSigningCA.crt >> MongoDBRootCA.pem



创建用于“MongoDB集群”中身份验证的“成员证书”（可以有多个）和“客户端证书”（可以有多个）。



第5步：“成员证书”，可以有多个，现在假定只创建一个“MongoDBServers001CA.crt”。
“成员证书”通常称为“x.509服务器证书”。应该对“mongod进程”和“mongos进程”使用该类型的证书（成员证书）。
“MongoDB集群成员”会使用这些证书（成员证书）来验证集群中的“成员身份”。换句话说，“mongod”就是用“服务器证书”来为“副本集的其他成员”提供“身份验证”的。
1）创建新的“私钥，MongoDBServers001Key.key”：
在“生产环境”中，需要对“私钥，MongoDBServers001Key.key”进行加密保护：
openssl genrsa -aes256 -out MongoDBServers001Key.key 4096
执行输出：
Enter PEM pass phrase:@MongoDBServers001CA.2022001A#
Verifying - Enter PEM pass phrase:@MongoDBServers001CA.2022001A#

2）为“私钥，MongoDBServers001Key.key”生成“成员证书的签名请求，MongoDBServers001.csr”：
openssl req -new -key MongoDBServers001Key.key -out MongoDBServers001.csr -config openssl.cnf
执行输出：
Enter pass phrase for MongoDBServers001Key.key:@MongoDBServers001CA.2022001A#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDB2022001]:MongoDB2022001
Organizational Unit Name (eg, section) [MongoDB001]:MongoDBServers
Common Name (e.g. server FQDN or YOUR name) []:MongoDBServers001
Email Address []:1227839175@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:20220101001
An optional company name []:MongoDB2022001

3）通过“中间签名CA，MongoDBMiddlemanSigningCA.crt”对“成员证书”进行签名：
openssl x509 -req -days 365 -in MongoDBServers001.csr -CA MongoDBMiddlemanSigningCA.crt -CAkey MongoDBMiddlemanSigningCAKey.key -CAcreateserial -out MongoDBServers001CA.crt -extfile openssl.cnf -extensions v3_req
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = MongoDB2022001, OU = MongoDBServers, CN = MongoDBServers001, emailAddress = 1227839175@qq.com
Enter pass phrase for MongoDBMiddlemanSigningCAKey.key:@MongoDBMiddlemanSigningCA.2022001A#

4）：
type MongoDBServers001CA.crt > MongoDBServers001.pem

5）：
type MongoDBServers001Key.key >> MongoDBServers001.pem



第6步：“客户端证书”，可以有多个，现在假定只创建一个“MongoDBClients001CA.crt”。
“客户端证书”用于“mongo shell”、“MongoDB Compass”、“MongoDB实用程序”和“工具”、“MongoDB驱动的应用程序”。
生成“客户端证书”的过程与生成“成员证书”的过程基
本相同，唯一的区别是要确保O（Organization Name）、OU（Organizational Unit）和DC值的组合与上面生成的“成员证书”不同。
1）：
openssl genrsa -aes256 -out MongoDBClients001Key.key 4096
执行输出：
Enter PEM pass phrase:@MongoDBClients001CA.2022001A#
Verifying - Enter PEM pass phrase:@MongoDBClients001CA.2022001A#

2）：
openssl req -new -key MongoDBClients001Key.key -out MongoDBClients001.csr -config openssl.cnf
执行输出：
Enter pass phrase for MongoDBClients001Key.key:@MongoDBClients001CA.2022001A#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDB2022001]:MongoDBClients2022001
Organizational Unit Name (eg, section) [MongoDB001]:MongoDBClients
Common Name (e.g. server FQDN or YOUR name) []:MongoDBClients001
Email Address []:1227839175@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:20220101100
An optional company name []:MongoDB2022001

3）：
openssl x509 -req -days 365 -in MongoDBClients001.csr -CA MongoDBMiddlemanSigningCA.crt -CAkey MongoDBMiddlemanSigningCAKey.key -CAcreateserial -out MongoDBClients001CA.crt -extfile openssl.cnf -extensions v3_req
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = MongoDBClients2022001, OU = MongoDBClients, CN = MongoDBClients001, emailAddress = 1227839175@qq.com
Enter pass phrase for MongoDBMiddlemanSigningCAKey.key:@MongoDBMiddlemanSigningCA.2022001A#

4）：
type MongoDBClients001CA.crt > MongoDBClients001.pem

5）：
type MongoDBClients001Key.key >> MongoDBClients001.pem
