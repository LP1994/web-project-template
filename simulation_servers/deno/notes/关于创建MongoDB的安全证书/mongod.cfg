# 您可以使用配置文件在启动时配置 mongod 和 mongos 实例。配置文件包含等同于 mongod 和 mongos 命令行选项的设置。
# 使用配置文件可以更轻松地管理 mongod 和 mongos 选项，尤其是对于大规模部署。您还可以在配置文件中添加注释来解释服务器的设置。
# 如果您使用包管理器安装 MongoDB，例如 Linux 上的 yum 或 apt 或 macOS 上的 brew，或者 Windows 上的 MSI 安装程序，默认配置文件已作为安装的一部分提供，如：Windows   MSI Installer   <install directory>\bin\mongod.cfg
# 官方 MongoDB 包中包含的 Linux 包初始化脚本依赖于特定的值systemLog.path、storage.dbPath、processManagement.fork。如果在默认配置文件中修改这些设置，mongod 可能无法启动。
# mongod.conf



# for documentation of all options, see:
# http://docs.mongodb.org/manual/reference/configuration-options/



# 系统日志相关的设置。
# where to write logging data.
systemLog:
  # 组件的默认日志消息详细级别。详细级别决定了 MongoDB 输出的信息和调试消息的数量，值范围为0到5，默认值为0。
  # 0 是 MongoDB 的默认日志详细级别，包括信息性消息。
  # 1 到 5 会增加详细级别以包括调试消息。
  verbosity: 0

  # 在尝试限制输出量的安静模式下运行 mongos 或 mongod，默认值为false。
  # systemLog.quiet 不推荐用于生产系统，因为它可能会使特定连接期间的跟踪问题变得更加困难。
  quiet: false

  # 打印详细信息以进行调试。用于与支持相关的故障排除的额外日志记录，默认值为false。
  traceAllExceptions: false

  # mongod 或 mongos 应将所有诊断日志记录信息发送到的日志文件的路径，而不是标准输出或主机的系统日志。 MongoDB 在指定路径创建日志文件。
  # Linux 包初始化脚本不期望systemLog.path从默认值更改。如果您使用 Linux 软件包并更改systemLog.path，您将不得不使用自己的初始化脚本并禁用内置脚本。
  path: D:\MongoDB\MongoDBWS\log\mongodb.log

  # 当为 true 时，mongos 或 mongod 在 mongos 或 mongod 实例重新启动时将新条目附加到现有日志文件的末尾。如果没有此选项，mongod 将备份现有日志并创建一个新文件。
  # 默认值为false。
  logAppend: false

  # MongoDB 将所有日志输出发送到的目标。指定file或syslog。如果指定file，则还必须指定systemLog.path。
  # 如果你不指定systemLog.destination, MongoDB 将所有日志输出发送到标准输出。
  # syslog守护进程在记录消息时生成时间戳，而不是在 MongoDB 发出消息时生成时间戳。这可能导致日志条目的误导性时间戳，尤其是当系统负载很重时。我们建议对生产系统使用file值以确保准确的时间戳。
  destination: file

  # 日志消息中时间戳的时间格式。指定以下值之一：iso8601-utc、iso8601-local（默认值）。
  # 从 MongoDB 4.4 开始，systemLog.timeStampFormat不再支持ctime值。ctime格式化日期的示例是：Wed Dec 31 18:17:54.811。
  timeStampFormat: iso8601-local



# 流程管理。
processManagement:
  # 启用在后台运行 mongos 或 mongod 进程的守护进程模式。
  # Windows 不支持该选项。
  # 如果您使用 Linux 软件包并更改processManagement.fork，您将不得不使用自己的初始化脚本并禁用内置脚本。Linux 包初始化脚本不期望processManagement.fork从默认值更改。
  # 默认值为false。
  # fork: false

  windowsService:
    # 作为 Windows 服务运行时 mongos 或 mongod 的服务名称。将此名称与 net start <name> 和 net stop <name> 操作一起使用。
    # 你必须使用 processManagement.windowsService.serviceName 结合 --install 或 --remove 选项。
    # 默认值为MongoDB。
    serviceName: MongoDBService

    # 默认值为MongoDB。
    # 在服务管理应用程序上为 MongoDB 列出的名称。
    displayName: "MongoDB Server (MongoDBService)"

    # 运行 mongos 或 mongod 服务描述。 你必须使用 processManagement.windowsService.description 与 --install 选项一起使用。 对于包含空格的描述，您必须将描述括在引号中。
    # 默认值为MongoDB Server。
    description: "MongoDB Database Server (MongoDBService)"



# network interfaces
# 在 4.2 版中更改：MongoDB 4.2 弃用 ssl 选项，转而使用具有相同功能的 tls 选项。
# 在 5.0 版更改：MongoDB 删除了 net.serviceExecutor 配置选项和相应的 --serviceExecutor 命令行选项。
net:
  # MongoDB 实例侦听客户端连接的 TCP 端口。
  # 默认值有如下：
  # 27017 用于 mongod（如果不是分片成员或配置服务器成员）或 mongos 实例。
  # 27018 如果 mongod 是 碎片成员。
  # 27019 如果 mongod 是 配置服务器成员。
  port: 27777

  # mongos 或 mongod 应该侦听客户端连接的主机名和/或 IP 地址和/或完整的 Unix 域套接字路径。您可以将 mongos 或 mongod 附加到任何接口。要绑定到多个地址，请输入逗号分隔值列表："localhost,/tmp/mongod.sock"。
  # 您可以指定 IPv4 和 IPv6 地址，或解析为 IPv4 或 IPv6 地址的主机名："localhost,2001:0DB8:e132:ba26:0d5c:2774:e7f9:d513"。
  # net.bindIp 和 net.bindIpAll 是互斥的。也就是说，您可以指定其中之一，但不能同时指定两者。
  # 为避免因 IP 地址更改而导致配置更新，请使用 DNS 主机名而不是 IP 地址。
  # 在配置副本集成员或分片集群成员时，使用 DNS 主机名而不是 IP 地址尤为重要。
  # 使用主机名而不是 IP 地址来跨分割的网络水平配置集群。从 MongoDB 5.0 开始，仅配置了 IP 地址的节点将无法通过启动验证而无法启动。
  # 在绑定到非本地主机（例如可公开访问的）IP 地址之前，请确保您已保护集群免受未经授权的访问。有关安全建议的完整列表，请参阅安全清单。
  # 至少，考虑启用身份验证和强化网络基础设施。
  # 要绑定到所有 IPv4 地址，请输入"0.0.0.0"。
  # 要绑定到所有 IPv4 和 IPv6 地址，请输入"::,0.0.0.0"或者"*"（从 MongoDB 4.2 开始支持星号）。
  # 默认值为"localhost"。
  # bindIp: ::,0.0.0.0

  # net.bindIp 和 net.bindIpAll 是互斥的。也就是说，您可以指定其中之一，但不能同时指定两者。
  # 默认值为false。
  bindIpAll: true

  # mongos 或 mongod 将接受的最大同时连接数。如果此设置高于操作系统配置的最大连接跟踪阈值，则此设置无效。
  # 不要为此选项分配太低的值，否则在正常应用程序操作期间会遇到错误。
  # 如果您有一个创建多个连接并允许它们超时而不是关闭它们的客户端，这对 mongos 特别有用。
  # 默认值为65536。
  maxIncomingConnections: 65536

  # 如果为 true，mongod 或 mongos 实例会在收到客户端的所有请求时验证它们，以防止客户端将格式错误或无效的 BSON 插入 MongoDB 数据库。
  # 对于子文档嵌套程度高的对象， net.wireObjectCheck 会对性能产生很小的影响。
  # 默认值为true。
  wireObjectCheck: true

  # net.ipv6为 true 以启用 IPv6 支持。 mongos、mongod 默认禁用 IPv6 支持。
  # 默认值为false。
  ipv6: true

  # 在 3.6 版中更改：MongoDB 3.6 删除了已弃用的 net.http 选项。自 3.2 版以来，这些选项已被弃用。
  # http:

  # 4.2 新版功能：tls 选项提供与以前的 ssl 选项相同的功能。
  tls:
    # 4.2 版中的新功能。 启用用于所有网络连接的 TLS。net.tls.mode设置可以是以下之一：
    # disabled：服务器不使用 TLS。
    # allowTLS：服务器之间的连接不使用 TLS。对于传入连接，服务器接受 TLS 和非 TLS。
    # preferTLS：服务器之间的连接使用 TLS。对于传入连接，服务器接受 TLS 和非 TLS。
    # requireTLS：服务器仅使用并接受 TLS 加密连接。
    # 如果未指定 --tlsCAFile 或 tls.CAFile 并且您未使用 x.509 身份验证，则在连接到启用 TLS 的服务器时将使用系统范围的 CA 证书存储。
    # 如果使用 x.509 身份验证，则必须指定 --tlsCAFile 或 tls.CAFile，除非使用 --tlsCertificateSelector。
    mode: requireTLS

    # 4.2 新版功能：包含 TLS 证书和密钥的 .pem 文件。
    # 从 macOS 或 Windows 上的 MongoDB 4.0 开始，您可以使用 net.tls.certificateSelector 设置以指定来自操作系统的安全证书存储而不是 PEM 密钥文件的证书。
    # net.tls.certificateKeyFile 和 net.tls.certificateSelector 是互斥的。您只能指定一个。
    # 在 Windows 或 macOS 上，您必须指定 net.tls.certificateKeyFile 或者 net.tls.certificateSelector 启用 TLS 时。
    # 仅对于 Windows，MongoDB 4.0 及更高版本不支持加密的 PEM 文件。
    # 如果遇到加密的 PEM 文件，mongod 将无法启动。要在 Windows 上安全地存储和访问用于 TLS 的证书，请使用 net.tls.certificateSelector。
    certificateKeyFile: D:\MongoDB\App\bin\MongoDBServers_192_168_10_101.pem

    # 4.2 新版功能：解密证书密钥文件（即 certificateKeyFile）的密码。仅当证书密钥文件已加密时才使用 net.tls.certificateKeyFilePassword 选项。
    # 在所有情况下，mongos 或 mongod 将从所有日志记录和报告输出中编辑密码。
    # 在 Windows 上，MongoDB 不支持加密证书。如果遇到加密的 PEM 文件，mongod 将失败。利用 net.tls.certificateSelector 反而。
    # certificateKeyFilePassword: 

    # 4.2 版中的新功能：在 Windows 和 macOS 上可用，作为 net.tls.certificateKeyFile 的替代方案。在 MongoDB 4.0 中，请参阅 net.ssl.certificateSelector。
    # 指定证书属性以便从操作系统的证书库中选择匹配的证书以用于 TLS/SSL。
    # net.tls.certificateKeyFile 和 net.tls.certificateSelector 选项是互斥的。您只能指定一个。
    # net.tls.certificateSelector 接受格式为 <property>=<value> 的参数，其中属性可以是以下之一：subject、thumbprint。
    # subject：值类型为ASCII string，证书上的主题名称或通用名称。
    # thumbprint：值类型为hex string，以十六进制表示的字节序列，用于通过其 SHA-1 摘要标识公钥。 指纹有时被称为指纹。
    # 使用系统 SSL 证书存储时，OCSP（在线证书状态协议）用于验证证书的吊销状态。
    # mongod 在操作系统的安全证书存储中搜索验证指定 TLS 证书的完整证书链所需的 CA 证书。
    # 具体来说，安全证书库必须包含根 CA 和构建到 TLS 证书的完整证书链所需的任何中间 CA 证书。
    # 不使用 net.tls.CAFile 或者 net.tls.cluster文件 指定根和中间 CA 证书。
    # 例如，如果TLS证书使用单个根CA证书签名，则安全证书存储区必须包含该根CA证书。如果TLS证书使用中间CA证书签名，则安全证书存储区必须包含中间CA证书和根CA证书。
    # 当使用net.tls.certificateSelector 或 --tlsCertificateSelector 设置指纹时，您不能使用 rotateCertificates 命令或 db.rotateCertificates() shell 方法。
    # certificateSelector: subject=C=CN,ST=GuangDong,L=ShenZhen,O=MongoDBServers_192_168_10_101_001,OU=MongoDBServers_192_168_10_101,CN=192.168.10.101,emailAddress=1227839175@qq.com

    # 4.2 新版功能：包含来自证书颁发机构的根证书链的 .pem 文件。使用相对或绝对路径指定 .pem 文件的文件名。
    # 如果使用 net.tls.certificateSelector 和/或 net.tls.clusterCertificateSelector，不使用 net.tls.CA文件 指定根和中间 CA 证书。
    # 存储验证完整信任链所需的所有 CA 证书 net.tls.certificateSelector 和/或 net.tls.clusterCertificateSelector 安全证书库中的证书。
    CAFile: D:\MongoDB\App\bin\MongoDBRootCA.pem

    # 4.2 版中的新功能。对于不提供证书的客户端，mongod 或 mongos 会加密 TLS/SSL 连接，假设连接已成功建立。
    # 然而，对于提供证书的客户端，mongos 或 mongod 使用由指定的根证书链执行证书验证 文件 并拒绝证书无效的客户。
    # 使用 net.tls.allowConnectionsWithoutCertificates 如果您的混合部署包含不向或不能向 mongos 或 mongod 出示证书的客户端，请选择此选项
    allowConnectionsWithoutCertificates: false

    # 4.2 版中的新功能。在集群中的其他服务器上启用或禁用 TLS 证书的验证检查，并允许使用无效证书进行连接。
    # 如果在使用 x.509 身份验证时指定 --tlsAllowInvalidCertificates 或 tls.allowInvalidCertificates: true，则无效证书仅足以建立 TLS 连接但不足以进行身份验证。
    # 当使用 net.tls.allowInvalidCertificates 设置，MongoDB 会记录有关使用无效证书的警告。
    allowInvalidCertificates: false

    # 什么时候 net.tls.allowInvalidHostnames 为真，MongoDB 禁用 TLS 证书中主机名的验证，如果主机名和证书与指定的主机名不匹配，则允许 mongod 连接到 MongoDB 实例。
    # 默认值false。
    allowInvalidHostnames: false

    # 4.2 版中的新功能。防止使用 TLS 运行的 MongoDB 服务器接受使用特定协议或协议的传入连接。要指定多个协议，请使用逗号分隔的协议列表。
    # disabledProtocols: ""

    # 当客户端使用指定的 TLS 版本连接时，指示 mongos 或 mongod 记录消息。
    # 指定单个 TLS 版本或多个 TLS 版本的逗号分隔列表。
    # logVersions: TLS1_0,TLS1_1,TLS1_2,TLS1_3

  # compression:
    # 默认值为"snappy,zstd,zlib"。
    # 在 3.6 和 4.0 版本中，mongod 和 mongos 默认启用网络压缩，使用 snappy 作为压缩器。
    # 从 4.2 版开始，mongod 和 mongos 实例默认按顺序使用 snappy、zstd、zlib 压缩器。
    # 要禁用网络压缩，请将值设置为"disabled"。
    # 当双方启用网络压缩时，消息被压缩。否则，各方之间的消息是未压缩的。
    # compressors: snappy,zstd,zlib



# 安全
security:
  # 启用或禁用服务器端JavaScript执行。当禁用时，您不能使用执行JavaScript代码的服务器端执行的操作，例如$where查询操作符、mapReduce命令、$accumulator和$function，如果不使用这些操作，请禁用服务器端脚本。
  # 从4.4版开始，security.javascriptEnabled在mongod和mongos都可以使用。在早期版本中，该设置只适用于mongod。
  # 默认值为true。
  javascriptEnabled: true



# 设置 MongoDB 参数或 MongoDB 服务器参数中描述的参数
# https://www.mongodb.com/docs/manual/reference/parameters/
setParameter:
  # 启用本地主机认证旁路。
  # 指定0或false可禁用本地主机身份验证绕过。默认启用。
  enableLocalhostAuthBypass: true



# 在哪里以及如何存储数据。
# Where and how to store data.
storage:
  # mongod 实例存储其数据的目录。
  # 该选项仅适用于 mongod。
  dbPath: D:\MongoDB\MongoDBWS\data

  # 日志。
  journal:
    # 默认值：在 64 位系统上为 true，在 32 位系统上为 false。
    enabled: true

    # mongod 进程在日志操作之间允许的最长时间（以毫秒为单位）。值的范围可以从 1 到 500 毫秒。较低的值会增加日志的持久性，但会降低磁盘性能。
    # 默认值100。
    commitIntervalMs: 100

  # 为真时，MongoDB 使用单独的目录来存储每个数据库的数据。目录位于 存储.dbPath 目录，每个子目录名对应数据库名。
  # 这 storage.directoryPerDB 设置仅适用于 mongod，不适用于使用内存存储引擎的 mongod 实例。
  # 从 MongoDB 5.0 开始，删除数据库中的最终集合（或删除数据库本身）时 storage.directoryPerDB 启用删除该数据库的新空子目录。
  # 默认值false。
  directoryPerDB: true

  # 引擎
  # engine:

  # wiredTiger:



# 操作分析
# operationProfiling:



# 复制
# replication:



# 分片
# sharding:



# 审计日志
# auditLog:



# snmp:



# 量身定做的选项
## Enterprise-Only Options:
