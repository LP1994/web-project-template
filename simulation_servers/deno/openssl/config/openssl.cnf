#
# OpenSSL example configuration file.
# See doc/man5/config.pod for more info.
#
# This is mostly being used for generation of certificate requests,
# but may be used for auto loading of providers

# Note that you can include other files from the main configuration
# file using the .include directive.
#.include filename

# This definition stops the following lines choking if HOME isn't
# defined.
HOME			= .

 # Use this in order to automatically load providers.
openssl_conf = openssl_init

# Comment out the next line to ignore configuration errors
config_diagnostics = 1

# Extra OBJECT IDENTIFIER info:
# oid_file       = $ENV::HOME/.oid
oid_section = new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions		=
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]
# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
# Add a simple OID like this:
# testoid1=1.2.3.4
# Or use config file substitution like this:
# testoid2=${testoid1}.5.6

# Policies used by the TSA examples.
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7

# For FIPS
# Optionally include a file that is generated by the OpenSSL fipsinstall
# application. This file contains configuration data required by the OpenSSL
# fips provider. It contains a named section e.g. [fips_sect] which is
# referenced from the [provider_sect] below.
# Refer to the OpenSSL security policy for more information.
# .include fipsmodule.cnf

[openssl_init]
providers = provider_sect

# List of providers to load
[provider_sect]
default = default_sect
# The fips section name should match the section name inside the
# included fipsmodule.cnf.
# fips = fips_sect

# If no providers are activated explicitly, the default one is activated implicitly.
# See man 7 OSSL_PROVIDER-default for more details.
#
# If you add a section explicitly activating any other provider(s), you most
# probably need to explicitly activate the default provider, otherwise it
# becomes unavailable in openssl.  As a consequence applications depending on
# OpenSSL may not work correctly which could lead to significant system
# problems including inability to remotely access the system.
[default_sect]
# activate = 1


####################################################################
[ ca ]
default_ca	= CA_default		# The default ca section

####################################################################
[ CA_default ]

dir		= ./demoCA		# Where everything is kept
certs		= $dir/certs		# Where the issued certs are kept
crl_dir		= $dir/crl		# Where the issued crl are kept
database	= $dir/index.txt	# database index file.
#unique_subject	= no			# Set to 'no' to allow creation of
					# several certs with same subject.
new_certs_dir	= $dir/newcerts		# default place for new certs.

certificate	= $dir/cacert.pem 	# The CA certificate
serial		= $dir/serial 		# The current serial number
crlnumber	= $dir/crlnumber	# the current crl number
					# must be commented out to leave a V1 CRL
crl		= $dir/crl.pem 		# The current CRL
private_key	= $dir/private/cakey.pem# The private key

x509_extensions	= usr_cert		# The extensions to add to the cert

# Comment out the following two lines for the "traditional"
# (and highly broken) format.
name_opt 	= ca_default		# Subject Name options
cert_opt 	= ca_default		# Certificate field options

# Extension copying option: use with caution.
# copy_extensions = copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
# crl_extensions	= crl_ext

default_days	= 36500			# how long to certify for
default_crl_days= 30			# how long before next CRL
default_md	= default		# use public key default MD
preserve	= no			# keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy		= policy_match

# For the CA policy
[ policy_match ]
countryName		= match
stateOrProvinceName	= match
organizationName	= match
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

####################################################################
[ req ]
default_bits		= 2048
default_keyfile 	= privkey.pem
distinguished_name	= req_distinguished_name
attributes		= req_attributes
# The extensions to add to the self signed cert
x509_extensions	= v3_ca
# Passwords for private keys if not present they will be prompted for
# input_password = secret
# output_password = secret
# This sets a mask for permitted string types. There are several options.
# default: PrintableString, T61String, BMPString.
# pkix	 : PrintableString, BMPString (PKIX recommendation before 2004)
# utf8only: only UTF8Strings (PKIX recommendation after 2004).
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK:XXXX a literal mask value.
# WARNING: ancient versions of Netscape crash on BMPStrings or UTF8Strings.
string_mask = utf8only
# The extensions to add to a certificate request
req_extensions = v3_req

[ req_distinguished_name ]
#国家代码，一般都是CN(大写)
countryName			= Country Name (2 letter code)
countryName_default		= CN
countryName_min			= 2
countryName_max			= 2

#省份
stateOrProvinceName		= State or Province Name (full name)
stateOrProvinceName_default	= GuangDong

#城市
localityName			= Locality Name (eg, city)
localityName_default	= ShenZhen

#企业/单位名称
0.organizationName		= Organization Name (eg, company)
0.organizationName_default	= HTTPS001

# we can do this but it is not needed normally :-)
#1.organizationName		= Second Organization Name (eg, company)
#1.organizationName_default	= World Wide Web Pty Ltd

#企业部门
organizationalUnitName		= Organizational Unit Name (eg, section)
organizationalUnitName_default	= HTTPS001

#证书的主域名，如：192.168.10.101
commonName			= Common Name (e.g. server FQDN or YOUR name)
commonName_max		= 102400
commonName_default	= 192.168.10.101

#邮箱
emailAddress			= Email Address
emailAddress_max		= 64
emailAddress_default	= 1227839175@qq.com

# SET-ex3			= SET extension number 3

[ req_attributes ]
challengePassword		= A challenge password
challengePassword_min		= 4
challengePassword_max		= 20
unstructuredName		= An optional company name

[ usr_cert ]

# These extensions are added when 'ca' signs a request.

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName=email:move

# Copy subject details
# issuerAltName=issuer:copy

# This is required for TSA certificates.
# extendedKeyUsage = critical,timeStamping

# Extensions to add to a certificate request
#要加入到证书请求中的一系列扩展项
[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = localhost
IP.1 = 127.0.0.1
IP.2 = 192.168.10.101
IP.3 = 192.168.10.102
IP.4 = 192.168.10.103
IP.5 = 192.168.10.104
IP.6 = 192.168.10.105
IP.7 = 192.168.10.106
IP.8 = 192.168.10.107
IP.9 = 192.168.10.108
IP.10 = 192.168.10.109
IP.11 = 192.168.10.110
IP.12 = 192.168.1.101
IP.13 = 192.168.1.102
IP.14 = 192.168.1.103
IP.15 = 192.168.1.104
IP.16 = 192.168.1.105
IP.17 = 192.168.1.106
IP.18 = 192.168.1.107
IP.19 = 192.168.1.108
IP.20 = 192.168.1.109
IP.21 = 192.168.1.110
IP.22 = 192.168.1.111
IP.23 = 192.168.1.112
IP.24 = 192.168.1.113
IP.25 = 192.168.1.114
IP.26 = 192.168.1.115
IP.27 = 192.168.1.116
IP.28 = 192.168.1.117
IP.29 = 192.168.1.118
IP.30 = 192.168.1.119
IP.31 = 192.168.1.120
IP.32 = 192.168.1.121
IP.33 = 192.168.1.122
IP.34 = 192.168.1.123
IP.35 = 192.168.1.124
IP.36 = 192.168.1.125
IP.37 = 192.168.1.126
IP.38 = 192.168.1.127
IP.39 = 192.168.1.128
IP.40 = 192.168.1.129
IP.41 = 192.168.1.130
IP.42 = 192.168.1.131
IP.43 = 192.168.1.132
IP.44 = 192.168.1.133
IP.45 = 192.168.1.134
IP.46 = 192.168.1.135
IP.47 = 192.168.1.136
IP.48 = 192.168.1.137
IP.49 = 192.168.1.138
IP.50 = 192.168.1.139
IP.51 = 192.168.1.140
IP.52 = 192.168.1.141
IP.53 = 192.168.1.142
IP.54 = 192.168.1.143
IP.55 = 192.168.1.144
IP.56 = 192.168.1.145
IP.57 = 192.168.1.146
IP.58 = 192.168.1.147
IP.59 = 192.168.1.148
IP.60 = 192.168.1.149
IP.61 = 192.168.1.150
IP.62 = 192.168.1.151
IP.63 = 192.168.1.152
IP.64 = 192.168.1.153
IP.65 = 192.168.1.154
IP.66 = 192.168.1.155
IP.67 = 192.168.1.156
IP.68 = 192.168.1.157
IP.69 = 192.168.1.158
IP.70 = 192.168.1.159
IP.71 = 192.168.1.160
IP.72 = 192.168.0.101
IP.73 = 192.168.0.102
IP.74 = 192.168.0.103
IP.75 = 192.168.0.104
IP.76 = 192.168.0.105
IP.77 = 192.168.0.106
IP.78 = 192.168.0.107
IP.79 = 192.168.0.108
IP.80 = 192.168.0.109
IP.81 = 192.168.0.110
IP.82 = 192.168.0.111
IP.83 = 192.168.0.112
IP.84 = 192.168.0.113
IP.85 = 192.168.0.114
IP.86 = 192.168.0.115
IP.87 = 192.168.0.116
IP.88 = 192.168.0.117
IP.89 = 192.168.0.118
IP.90 = 192.168.0.119
IP.91 = 192.168.0.120
IP.92 = 192.168.0.121
IP.93 = 192.168.0.122
IP.94 = 192.168.0.123
IP.95 = 192.168.0.124
IP.96 = 192.168.0.125
IP.97 = 192.168.0.126
IP.98 = 192.168.0.127
IP.99 = 192.168.0.128
IP.100 = 192.168.0.129
IP.101 = 192.168.0.130
IP.102 = 192.168.0.131
IP.103 = 192.168.0.132
IP.104 = 192.168.0.133
IP.105 = 192.168.0.134
IP.106 = 192.168.0.135
IP.107 = 192.168.0.136
IP.108 = 192.168.0.137
IP.109 = 192.168.0.138
IP.110 = 192.168.0.139
IP.111 = 192.168.0.140
IP.112 = 192.168.0.141
IP.113 = 192.168.0.142
IP.114 = 192.168.0.143
IP.115 = 192.168.0.144
IP.116 = 192.168.0.145
IP.117 = 192.168.0.146
IP.118 = 192.168.0.147
IP.119 = 192.168.0.148
IP.120 = 192.168.0.149
IP.121 = 192.168.0.150
IP.122 = 192.168.0.151
IP.123 = 192.168.0.152
IP.124 = 192.168.0.153
IP.125 = 192.168.0.154
IP.126 = 192.168.0.155
IP.127 = 192.168.0.156
IP.128 = 192.168.0.157
IP.129 = 192.168.0.158
IP.130 = 192.168.0.159
IP.131 = 192.168.0.160

# Extensions for a typical CA
[ v3_ca ]
basicConstraints = critical,CA:true
authorityKeyIdentifier=keyid:always,issuer
subjectKeyIdentifier=hash




# PKIX recommendation.

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
# keyUsage = cRLSign, keyCertSign

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName=email:copy
# Copy issuer details
# issuerAltName=issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj=DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints= critical, DER:30:03:01:01:FF

[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always

[ proxy_cert_ext ]
# These extensions should be added when creating a proxy certificate

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName=email:move

# Copy subject details
# issuerAltName=issuer:copy

# This really needs to be in place for it to be a proxy certificate.
proxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

####################################################################
[ tsa ]

default_tsa = tsa_config1	# the default TSA section

[ tsa_config1 ]

# These are used by the TSA reply generation only.
dir		= ./demoCA		# TSA root directory
serial		= $dir/tsaserial	# The current serial number (mandatory)
crypto_device	= builtin		# OpenSSL engine to use for signing
signer_cert	= $dir/tsacert.pem 	# The TSA signing certificate
					# (optional)
certs		= $dir/cacert.pem	# Certificate chain to include in reply
					# (optional)
signer_key	= $dir/private/tsakey.pem # The TSA private key (optional)
signer_digest  = sha256			# Signing digest to use. (Optional)
default_policy	= tsa_policy1		# Policy if request did not specify it
					# (optional)
other_policies	= tsa_policy2, tsa_policy3	# acceptable policies (optional)
digests     = sha1, sha256, sha384, sha512  # Acceptable message digests (mandatory)
accuracy	= secs:1, millisecs:500, microsecs:100	# (optional)
clock_precision_digits  = 0	# number of digits after dot. (optional)
ordering		= yes	# Is ordering defined for timestamps?
				# (optional, default: no)
tsa_name		= yes	# Must the TSA name be included in the reply?
				# (optional, default: no)
ess_cert_id_chain	= no	# Must the ESS cert id chain be included?
				# (optional, default: no)
ess_cert_id_alg		= sha1	# algorithm to compute certificate
				# identifier (optional, default: sha1)

[insta] # CMP using Insta Demo CA
# Message transfer
server = pki.certificate.fi:8700
# proxy = # set this as far as needed, e.g., http://192.168.1.1:8080
# tls_use = 0
path = pkix/

# Server authentication
recipient = "/C=FI/O=Insta Demo/CN=Insta Demo CA" # or set srvcert or issuer
ignore_keyusage = 1 # potentially needed quirk
unprotected_errors = 1 # potentially needed quirk
extracertsout = insta.extracerts.pem

# Client authentication
ref = 3078 # user identification
secret = pass:insta # can be used for both client and server side

# Generic message options
cmd = ir # default operation, can be overridden on cmd line with, e.g., kur

# Certificate enrollment
subject = "/CN=openssl-cmp-test"
newkey = insta.priv.pem
out_trusted = insta.ca.crt
certout = insta.cert.pem

[pbm] # Password-based protection for Insta CA
# Server and client authentication
ref = $insta::ref # 3078
secret = $insta::secret # pass:insta

[signature] # Signature-based protection for Insta CA
# Server authentication
trusted = insta.ca.crt # does not include keyUsage digitalSignature

# Client authentication
secret = # disable PBM
key = $insta::newkey # insta.priv.pem
cert = $insta::certout # insta.cert.pem

[ir]
cmd = ir

[cr]
cmd = cr

[kur]
# Certificate update
cmd = kur
oldcert = $insta::certout # insta.cert.pem

[rr]
# Certificate revocation
cmd = rr
oldcert = $insta::certout # insta.cert.pem
