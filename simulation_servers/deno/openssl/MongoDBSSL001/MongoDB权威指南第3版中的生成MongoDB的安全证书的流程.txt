MongoDB权威指南第3版中的生成HTTPS证书的流程

Windows查看证书的命令：certmgr.msc（当前用户）、mmc（本地计算机）

关于在生成操作的过程中，对于输入值的说明：
1、以生成“MongoDBSSL001_Root_CA.crt”中的输入值为基准。
2、生成“MongoDBSSL001_MiddlemanSigning_CA.csr”时，输入值中除了“Common Name”选项的值可以跟“基准”的“Common Name”选项的值不一样（最好不一样），其他选项值都必须跟“基准”的一样。
3、生成“MongoDBSSL001_Servers_192_168_10_101_CA.csr”时，输入值中除了“Common Name”、“Organizational Unit Name”选项的值可以跟“基准”、“MongoDBSSL001_MiddlemanSigning_CA.csr”的“Common Name”、“Organizational Unit Name”选项的值不一样（最好不一样），其他选项值都必须跟“基准”的一样。
4、生成“MongoDBSSL001_Clients_192_168_10_101_CA.csr”时，输入值中除了“Common Name”、“Organizational Unit Name”选项的值可以跟“基准”、“MongoDBSSL001_MiddlemanSigning_CA.csr”的“Common Name”、“Organizational Unit Name”选项的值不一样（最好不一样），其他选项值都必须跟“基准”的一样。
5、多个“成员_服务端CA证书”之间的输入值中，“Organizational Unit Name”选项的值必须一样。
6、多个“客户端CA证书”之间的输入值中，“Organizational Unit Name”选项的值必须一样。
7、多个“成员_服务端CA证书”之间的输入值中，“Common Name”选项的值可以是各自不同的域名、IP，且该值也这只能是域名、IP。当然在生成的过程中可以通过设置“subjectAltName”来设置多个域名、IP别名。
8、多个“客户端CA证书”之间的输入值中，“Common Name”选项的值可以是各自不同的域名、IP，且该值也这只能是域名、IP。当然在生成的过程中可以通过设置“subjectAltName”来设置多个域名、IP别名。



注意：使用openssl_不带subjectAltName.cfg、openssl_不带subjectAltName.cnf、openssl-vms_不带subjectAltName.cnf！！！
第1步生成“私钥”：MongoDBSSL001_Root_CA_Key.key
在“生产环境”中，需要对“私钥，MongoDBSSL001_Root_CA_Key.key”进行加密保护：
openssl genrsa -aes256 -out MongoDBSSL001_Root_CA_Key.key 4096
执行输出：
Enter PEM pass phrase:@MongoDBSSL001.2023#
Verifying - Enter PEM pass phrase:@MongoDBSSL001.2023#



注意：使用openssl_不带subjectAltName.cfg、openssl_不带subjectAltName.cnf、openssl-vms_不带subjectAltName.cnf！！！
第2步生成“根证书/根CA”：MongoDBSSL001_Root_CA.crt
使用openssl req命令来创建“根证书/根CA，MongoDBSSL001_Root_CA.crt”。由于“根证书/根CA，MongoDBSSL001_Root_CA.crt”是权威链的最顶端，因此使用上一步创建的“私钥，MongoDBSSL001_Root_CA_Key.key”对此“根证书/根CA，MongoDBSSL001_Root_CA.crt”进行自签名。-x509选项会通知openssl req命令我们希望使用提供给-key选项的“私钥，MongoDBSSL001_Root_CA_Key.key”对“根证书/根CA，MongoDBSSL001_Root_CA.crt”进行自签名。输出是一个名为MongoDBSSL001_Root_CA.crt的“根证书/根CA，MongoDBSSL001_Root_CA.crt”文件：
openssl req -new -x509 -days 365 -key MongoDBSSL001_Root_CA_Key.key -out MongoDBSSL001_Root_CA.crt -config openssl.cnf
执行输出：
Enter pass phrase for MongoDBSSL001_Root_CA_Key.key:@MongoDBSSL001.2023#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDBSSL001]:MongoDBSSL001
Organizational Unit Name (eg, section) [IT]:IT
Common Name (e.g. server FQDN or YOUR name) []:MongoDBSSL001_Root_CA
Email Address [2726893248@qq.com]:2726893248@qq.com



如果看一下“根证书/根CA，MongoDBSSL001_RootCA.crt”文件，你会发现它包含了“根证书/根CA，MongoDBSSL001_RootCA.crt”的公共证书。可以查看由以下命令
生成的一个可读版本来验证其内容：
openssl x509 -noout -text -in MongoDBSSL001_Root_CA.crt
输出：
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            03:82:36:e3:8d:fb:b0:2d:21:07:8c:49:c8:f4:43:9e:cd:23:5d:b0
        Signature Algorithm: sha512WithRSAEncryption
        Issuer: C = CN, ST = GuangDong, L = ShenZhen, O = MongoDBSSL001, OU = IT, CN = MongoDBSSL001_Root_CA, emailAddress = 2726893248@qq.com
        Validity
            Not Before: Feb 27 22:46:09 2023 GMT
            Not After : Feb 27 22:46:09 2024 GMT
        Subject: C = CN, ST = GuangDong, L = ShenZhen, O = MongoDBSSL001, OU = IT, CN = MongoDBSSL001_Root_CA, emailAddress = 2726893248@qq.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:d1:c6:13:1b:8e:b1:ed:56:86:c0:3a:d1:fd:72:
                    39:b9:64:de:1e:46:1a:64:95:56:79:07:b0:70:36:
                    60:ca:cf:8d:b4:52:43:4f:c3:c8:48:86:31:18:98:
                    89:c7:54:62:be:78:c5:6b:c1:c6:a4:1f:dd:95:2a:
                    40:61:40:73:fa:ea:7d:99:42:68:d6:8f:60:a2:2c:
                    77:32:34:c1:58:4f:57:ae:9b:f2:59:b4:c5:db:31:
                    9c:89:a2:83:77:2e:a4:65:3f:d2:f5:38:7e:63:c4:
                    5c:90:f2:68:12:bf:6b:cd:a3:2a:0f:4b:2e:42:61:
                    8f:7d:3d:c7:55:61:8a:d7:a0:41:50:bb:c8:8c:8a:
                    ac:ca:27:9b:cf:7c:52:97:3d:d8:f8:a9:a9:fe:df:
                    53:d1:04:d3:fc:6c:2f:05:5e:a3:f1:fe:b6:ae:62:
                    99:7b:de:e6:0b:68:56:dd:8f:02:52:20:80:20:21:
                    fb:2e:22:a5:b7:de:ed:48:4b:cf:f0:ca:e3:33:89:
                    9c:a2:a8:fc:03:bb:39:e4:67:3c:5a:ac:27:aa:af:
                    e6:b9:15:99:fd:d3:c8:56:ce:7a:2e:67:71:6a:7f:
                    63:24:29:ee:e7:05:82:23:0d:2f:46:11:29:74:bb:
                    a9:b1:e3:69:fd:b7:99:4c:7c:9b:3d:ba:cf:0d:35:
                    25:d8:6a:9e:b6:48:be:0b:e2:fb:77:b7:38:1b:6f:
                    44:66:b2:24:79:ed:0d:3e:40:2d:41:e7:89:65:3a:
                    4e:e1:63:90:c0:12:2a:0f:2c:5b:ab:a9:f2:46:d6:
                    7f:4a:64:2c:a8:9b:73:75:a5:cf:07:a2:07:e8:a5:
                    98:9d:92:ac:92:66:fc:5a:ba:90:ba:00:65:36:53:
                    e2:0b:9a:39:95:eb:2b:2d:d2:1c:89:2d:90:6c:42:
                    e4:2a:37:1a:52:b6:9a:df:18:bc:cb:06:78:85:5e:
                    1c:db:30:4a:5a:84:a0:aa:de:f8:97:a6:ae:08:c6:
                    a3:74:6f:02:d6:55:c5:df:22:ff:db:5f:d0:23:36:
                    c9:79:1a:b2:e2:2d:73:96:91:bf:c5:6f:16:de:9f:
                    05:3f:e0:09:27:a8:c8:42:46:da:31:d9:56:07:53:
                    ff:ef:8a:02:56:b8:62:8a:ef:98:9f:d9:80:07:73:
                    da:77:a3:a7:0e:7a:6e:4c:03:85:5e:1d:6b:ca:c8:
                    de:74:40:30:bd:e5:a2:65:9a:0a:68:e8:ab:98:8b:
                    cd:3e:0a:42:f3:70:ea:8f:07:b6:0c:95:46:c2:97:
                    56:47:d0:ae:e9:9a:b2:20:08:f7:db:df:11:4e:f2:
                    01:cd:18:98:08:2c:dd:7b:07:29:7c:b6:20:c9:58:
                    17:28:c9
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                ED:D5:18:47:81:84:B8:BD:28:10:D5:4D:0E:33:1C:86:91:56:A4:1F
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Authority Key Identifier:
                keyid:ED:D5:18:47:81:84:B8:BD:28:10:D5:4D:0E:33:1C:86:91:56:A4:1F
                DirName:/C=CN/ST=GuangDong/L=ShenZhen/O=MongoDBSSL001/OU=IT/CN=MongoDBSSL001_Root_CA/emailAddress=2726893248@qq.com
                serial:03:82:36:E3:8D:FB:B0:2D:21:07:8C:49:C8:F4:43:9E:CD:23:5D:B0
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
    Signature Algorithm: sha512WithRSAEncryption
    Signature Value:
        50:ed:64:67:ce:e6:c2:e9:e2:88:0e:d0:10:32:9b:0e:f8:60:
        42:f7:c3:82:44:fc:22:5a:69:4e:4a:f3:98:af:ef:48:d2:89:
        1f:d0:56:63:40:8e:f4:be:05:f4:bb:94:af:b9:20:bb:fb:ed:
        b6:ae:66:be:f6:18:49:28:90:e1:41:dd:6f:5f:31:db:5d:e3:
        b0:10:bd:4f:57:15:d5:23:0b:dd:7c:91:49:1a:dd:e2:f4:a3:
        ee:c8:75:47:f9:6e:68:82:e1:98:56:73:c9:83:89:df:68:4b:
        b7:09:8e:19:97:e7:bd:b1:bc:ce:ff:17:19:f5:63:a9:55:da:
        f6:c7:12:44:23:a6:2d:b9:a6:59:15:a4:dc:7a:f4:67:4c:f9:
        5c:7c:c4:e5:8b:48:29:d4:c9:d4:20:ad:55:42:12:e9:ee:91:
        7d:37:4a:26:72:e2:c9:47:83:21:18:69:57:bf:d1:ff:89:f2:
        57:0e:94:ad:3e:4c:ae:87:cc:b5:f7:22:25:ae:77:2c:e7:98:
        f9:3d:36:72:f5:fb:10:49:c8:d6:ae:57:d5:ea:b4:04:7e:a0:
        b4:57:d1:e7:a8:11:46:ef:e9:41:7d:d2:c8:fb:e4:f2:76:ee:
        d9:00:33:17:5a:fe:f0:ba:54:ee:35:8c:56:d3:9f:b6:84:d3:
        87:12:e7:78:0d:06:94:c6:55:dc:bf:86:53:03:18:83:47:e1:
        ad:a9:ea:72:be:d0:9f:0e:59:f9:9b:0e:c4:80:ce:f4:aa:c1:
        0d:89:f0:ad:b8:86:d9:d0:e9:a8:f9:43:a7:fd:5f:81:21:ca:
        ec:e0:c2:87:b3:9c:6d:93:25:97:59:36:99:2e:fa:f1:cf:23:
        4e:7f:a3:c7:8e:5a:d4:61:de:ff:82:26:98:59:6b:66:84:21:
        2e:b1:96:2c:ec:1f:d3:da:81:3b:75:d3:da:20:66:c3:f4:8f:
        7a:48:a3:1c:f7:c4:12:71:87:fe:5e:20:ab:79:e6:0b:5f:47:
        b8:93:dd:0c:b6:1a:87:7c:4d:30:ae:f0:69:43:03:9d:2a:e3:
        cf:e6:bd:99:b7:2e:f4:cf:8c:f6:84:7c:9c:0f:28:86:fc:d5:
        2c:50:74:2e:b4:da:1b:29:b0:46:d4:05:c3:cc:e4:41:8a:2d:
        b2:82:27:c3:2c:6e:67:d4:cc:b0:7f:de:8a:00:7e:ce:73:e5:
        c3:69:7f:f2:34:47:7d:00:ff:68:8f:d9:72:d2:49:91:ce:c1:
        76:0b:ab:f2:a2:04:68:00:e8:bf:59:b4:d3:a8:4b:1b:b5:79:
        0c:e4:1c:ae:b3:25:c6:a4:bc:e3:3f:da:89:9a:07:76:5b:ce:
        79:a2:22:05:0e:42:34:99



注意：使用openssl_不带subjectAltName.cfg、openssl_不带subjectAltName.cnf、openssl-vms_不带subjectAltName.cnf！！！
第3步根据上面的第2步创建的“根证书/根CA，MongoDBSSL001_Root_CA.crt”再一次创建用于对“成员证书”和“客户端证书”进行签名的“中间签名CA，MongoDBSSL001_MiddlemanSigning_CA.crt”：
1）先再次生成一个“私钥，MongoDBSSL001_MiddlemanSigning_CA_Key.key”：
在“生产环境”中，需要对“私钥，MongoDBSSL001_MiddlemanSigning_CA_Key.key”进行加密保护：
openssl genrsa -aes256 -out MongoDBSSL001_MiddlemanSigning_CA_Key.key 4096
执行输出：
Enter PEM pass phrase:@MongoDBSSL001.2023#
Verifying - Enter PEM pass phrase:@MongoDBSSL001.2023#

2）再执行：
openssl req -new -key MongoDBSSL001_MiddlemanSigning_CA_Key.key -out MongoDBSSL001_MiddlemanSigning_CA.csr -config openssl.cnf
执行输出：
Enter pass phrase for MongoDBSSL001_MiddlemanSigning_CA_Key.key:@MongoDBSSL001.2023#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDBSSL001]:MongoDBSSL001
Organizational Unit Name (eg, section) [IT]:IT
Common Name (e.g. server FQDN or YOUR name) []:MongoDBSSL001_MiddlemanSigning_CA
Email Address [2726893248@qq.com]:2726893248@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:@MongoDBSSL001.2023#
An optional company name [MongoDBSSL001]:MongoDBSSL001

3）最后执行：
openssl x509 -req -days 365 -in MongoDBSSL001_MiddlemanSigning_CA.csr -CA MongoDBSSL001_Root_CA.crt -CAkey MongoDBSSL001_Root_CA_Key.key -set_serial 01 -out MongoDBSSL001_MiddlemanSigning_CA.crt -extfile openssl.cnf -extensions v3_ca
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = MongoDBSSL001, OU = IT, CN = MongoDBSSL001_MiddlemanSigning_CA, emailAddress = 2726893248@qq.com
Enter pass phrase for MongoDBSSL001_Root_CA_Key.key:@MongoDBSSL001.2023#



第4步：MongoDBSSL001_Root_CA.pem
需要将“根证书/根CA，MongoDBSSL001_Root_CA.crt”（包含根公钥）和“中间签名CA，MongoDBSSL001_MiddlemanSigning_CA.crt”（包含签名公钥）
连接到一个“pem文件（MongoDBSSL001_Root_CA.pem）”中。这个文件（MongoDBSSL001_Root_CA.pem）稍后将作为“--tlsCAFile”选项的值提供给“mongod”或“客户端进程”。
1）先执行：
type MongoDBSSL001_Root_CA.crt > MongoDBSSL001_Root_CA.pem
2）再执行：
type MongoDBSSL001_MiddlemanSigning_CA.crt >> MongoDBSSL001_Root_CA.pem



创建用于“MongoDB集群”中身份验证的“成员证书/x.509服务器证书”（可以有多个）和“客户端证书”（可以有多个）。



注意：使用openssl_带subjectAltName.cfg、openssl_带subjectAltName.cnf、openssl-vms_带subjectAltName.cnf！！！
第5步：“成员证书/x.509服务器证书”，可以有多个，现在假定只创建一个“MongoDBSSL001_Servers_192_168_2_7_CA.crt”。
“成员证书”通常称为“x.509服务器证书”。应该对“mongod进程”和“mongos进程”使用该类型的证书（成员证书）。
“MongoDB集群成员”会使用这些证书（成员证书/x.509服务器证书）来验证集群中的“成员身份”。换句话说，“mongod”就是用“成员证书/x.509服务器证书”来为“副本集的其他成员”提供“身份验证”的。
1）创建新的“私钥，MongoDBSSL001_Servers_192_168_2_7_CA_Key.key”：
Windows不支持加密的key，加密会导致MongoDB无法启动：
openssl genrsa -out MongoDBSSL001_Servers_192_168_2_7_CA_Key.key 4096

2）为“私钥，MongoDBSSL001_Servers_192_168_2_7_CA_Key.key”生成“成员证书的签名请求，MongoDBSSL001_Servers_192_168_2_7_CA.csr”：
openssl req -new -key MongoDBSSL001_Servers_192_168_2_7_CA_Key.key -out MongoDBSSL001_Servers_192_168_2_7_CA.csr -config openssl.cnf
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDBSSL001]:MongoDBSSL001
Organizational Unit Name (eg, section) [IT]:MongoDBSSL001_Servers
Common Name (e.g. server FQDN or YOUR name) []:192.168.2.7
Email Address [2726893248@qq.com]:2726893248@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:@MongoDBSSL001.2023#
An optional company name [MongoDBSSL001]:MongoDBSSL001

3）通过“中间签名CA，MongoDBSSL001_MiddlemanSigning_CA.crt”对“成员证书”进行签名：
openssl x509 -req -days 365 -in MongoDBSSL001_Servers_192_168_2_7_CA.csr -CA MongoDBSSL001_MiddlemanSigning_CA.crt -CAkey MongoDBSSL001_MiddlemanSigning_CA_Key.key -CAcreateserial -out MongoDBSSL001_Servers_192_168_2_7_CA.crt -extfile openssl.cnf -extensions v3_req
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = MongoDBSSL001, OU = MongoDBSSL001_Servers, CN = 192.168.10.101, emailAddress = 2726893248@qq.com
Enter pass phrase for MongoDBSSL001_MiddlemanSigning_CA_Key.key:@MongoDBSSL001.2023#

4）：
type MongoDBSSL001_Servers_192_168_2_7_CA.crt > MongoDBSSL001_Servers_192_168_2_7_CA.pem

5）：
type MongoDBSSL001_Servers_192_168_2_7_CA_Key.key >> MongoDBSSL001_Servers_192_168_2_7_CA.pem



注意：使用openssl_带subjectAltName.cfg、openssl_带subjectAltName.cnf、openssl-vms_带subjectAltName.cnf！！！
第6步：“客户端证书”，可以有多个，现在假定只创建一个“MongoDBSSL001_Clients_192_168_2_7_CA.crt”。
“客户端证书”用于“mongo shell”、“MongoDB Compass”、“MongoDB实用程序”和“工具”、“MongoDB驱动的应用程序”。
生成“客户端证书”的过程与生成“成员证书/x.509服务器证书”的过程基
本相同，唯一的区别是要确保O（Organization Name）、OU（Organizational Unit）和DC值的组合与上面生成的“成员证书/x.509服务器证书”不同。
1）：
Windows不支持加密的key，加密会导致MongoDB无法启动：
openssl genrsa -out MongoDBSSL001_Clients_192_168_2_7_CA_Key.key 4096

2）：
openssl req -new -key MongoDBSSL001_Clients_192_168_2_7_CA_Key.key -out MongoDBSSL001_Clients_192_168_2_7_CA.csr -config openssl.cnf
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [MongoDBSSL001]:MongoDBSSL001
Organizational Unit Name (eg, section) [IT]:MongoDBSSL001_Clients
Common Name (e.g. server FQDN or YOUR name) []:192.168.2.7
Email Address [2726893248@qq.com]:2726893248@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:@MongoDBSSL001.2023#
An optional company name [MongoDBSSL001]:MongoDBSSL001

3）：
openssl x509 -req -days 365 -in MongoDBSSL001_Clients_192_168_2_7_CA.csr -CA MongoDBSSL001_MiddlemanSigning_CA.crt -CAkey MongoDBSSL001_MiddlemanSigning_CA_Key.key -CAcreateserial -out MongoDBSSL001_Clients_192_168_2_7_CA.crt -extfile openssl.cnf -extensions v3_req
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = MongoDBSSL001, OU = MongoDBSSL001_Clients, CN = 192.168.10.101, emailAddress = 2726893248@qq.com
Enter pass phrase for MongoDBSSL001_MiddlemanSigning_CA_Key.key:@MongoDBSSL001.2023#

4）：
type MongoDBSSL001_Clients_192_168_2_7_CA.crt > MongoDBSSL001_Clients_192_168_2_7_CA.pem

5）：
type MongoDBSSL001_Clients_192_168_2_7_CA_Key.key >> MongoDBSSL001_Clients_192_168_2_7_CA.pem



MongoDB的基本使用：
1、命令行中启动MongodDB：
mongod --config D:\MongoDB\App\bin\mongod.cfg

2、命令行中使用mongosh连接MongodDB数据库：
mongosh --port 27777 --tls --tlsCertificateKeyFile D:\MongoDB\App\bin\ssl\MongoDBSSL001_Clients_192_168_2_7_CA.pem --tlsCAFile D:\MongoDB\App\bin\ssl\MongoDBSSL001_Root_CA.pem