<!--
Project: upload-for-multiple
FileDirPath: src/template/ejs/head_meta/MetaName001.ejs
Author: 12278
Email: 1227839175@qq.com
IDE: WebStorm
CreateDate: 2024-1-1 00:00:00 星期一
-->
<!--以下是name Start-->
<!--
meta的其他name，这WHATWG Wiki MetaExtensions页面包含大量尚未正式接受的非标准元数据名称，但是，其中包含的一些名称在实践中已经相当普遍：
https://wiki.whatwg.org/wiki/MetaExtensions
-->
<!--
该meta项用途：
对当前页面的等级衡量，告诉蜘蛛（即网络爬虫）当前页面在整个网站中的权重到底是多少。

值说明：
general：是一般页面。
mature：是比较成熟的页面。
restricted：代表受限制的。
-->
<meta name = 'rating'
      content = 'general' />
<!--
该meta项用途：
UC浏览器私有meta属性，强制图片显示，为了节省流量及加快速度，通过强制图片显示的功能可以保证图片显示不受用户的设置影响。
-->
<meta name = 'imageMode'
      content = 'force' />
<!--
该meta项用途：
QQ浏览器私有meta属性，页面模式。

值说明：
default：普通浏览模式（默认）。
app：网页应用模式（定制工具栏，全屏显示） 。
-->
<meta name = 'x5-page-mode'
      content = 'app' />
<!--
该meta项用途：
优化微软的老式浏览器，控制旧版本Internet Explorer中的布局行为。

值说明：
375：宽度为375px。
-->
<meta name = 'MobileOptimized'
      content = '375' />
<!--
该meta项用途：
控制从文档发送的请求的HTTP Referer标头，除了HTTP头之外，还可以在HTML中设置此策略。
HTTP Referer请求标头包含发出请求的页面的绝对或部分地址。Referer标头允许服务器识别人们从哪里访问它的页面。此数据可用于分析、日志记录、优化缓存等。
您可以在<a>、<area>、<img>、<iframe>、<script>或<link>元素上指定referrerpolicy属性，以为单个请求设置referrer策略：<a href="http://example.com" referrerpolicy="origin">…</a>。
或者，可以在a、area、link元素上设置noreferrer链接关系：<a href="http://example.com" rel="noreferrer">…</a>。
警告：如上所示，noreferrer链接关系写入时没有破折号。使用<meta>元素为整个文档指定referrer策略时，应使用破折号：<meta name=“referrer”content=“no-referrer“>。

值说明：
no-referrer：不要发送HTTP Referer标头。
no-referrer-when-downgrade：当协议安全级别保持不变或提高时，在Referrer中发送origin、path、query string(HTTP→HTTP, HTTP→HTTPS, HTTPS→HTTPS)。不要将请求的Referrer头发送到协议安全级别降级或不太安全的目的地(HTTPS→HTTP, HTTPS→file)。
origin：仅发送origin。例如，位于文档https://example.com/page.html的将发送https://example.com/。
origin-when-cross-origin：对同一协议级别执行同一来源请求时(HTTP→HTTP, HTTPS→HTTPS)发送origin、path、query string。仅为跨域请求和请求发送到不太安全的目的地(HTTPS→HTTP)发送origin。
same-origin：发送相同来源请求的origin、path、query string。对于跨来源请求，不要发送Referer标头。
strict-origin：当协议安全级别保持不变时，仅发送origin(HTTPS→HTTPS)。不要将Referer标头发送到不太安全的目的地(HTTPS→HTTP)。
strict-origin-when-cross-origin：默认值，在执行同一来源请求时发送origin、path、query string。对于跨来源请求，仅当协议安全级别保持不变时发送origin(HTTPS→HTTPS)。不要将Referer标头发送到不太安全的目的地(HTTPS→HTTP)。
注意：如果未指定策略，或如果提供的值无效，则"strict-origin-when-cross-origin"是默认策略（请参阅2020年11月的规范修订版：https://github.com/whatwg/fetch/pull/1066）。以前的默认值是"no-referrer-when-downgrade"。
unsafe-url：在执行任何请求时发送origin、path、query string，而不考虑安全性。
警告："unsafe-url"此策略可能会将HTTPS资源URL中的私有信息泄漏到不安全的来源。仔细考虑此设置的影响。

注意：
动态插入该meta项时，如使用document.write()、document.appendChild()会引用行为不可预测。
当定义了多个冲突的策略时，将使用no-referrer策略。

详见：
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer
-->
<meta name = 'referrer'
      content = 'strict-origin-when-cross-origin' />
<!--
该meta项用途：
UC浏览器私有meta属性，排版模式。

值说明：
standard：默认，标准模式。
fitScreen：适应屏幕。
-->
<meta name = 'layoutMode'
      content = 'fitScreen' />
<!--
该meta项用途：
针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓，通知黑莓浏览器，文档中包含的内容是为小屏幕设计的。
-->
<meta name = 'HandheldFriendly'
      content = 'true' />
<!--
该meta项用途：
UC浏览器私有meta属性，应用模式是为方便Web应用及游戏开发者设置的综合开关，通过meta标签进行指示打开，当进入应用模式时，长按菜单、默认手势、夜间模式失效。
-->
<meta name = 'browserMode'
      content = 'application' />
<!--
该meta项用途：
告知浏览器本页面属于什么类型设备的页面，主要有PC电脑端页面和Mobile手机移动端页面两种设备。
可以帮助百度识别网站是PC站还是Mobile站，给百度提交提交校验识别结果的正确性，减少百度蜘蛛把PC站当成Mobile站，或者把Mobile站当成PC站进行抓取。

值说明：
pc：PC电脑端页面。
mobile：Mobile手机移动端页面。
pc,mobile：自适应响应式的页面。
-->
<meta name = 'applicable-device'
      content = 'pc,mobile' />
<!--
该meta项用途：
用于控制Windows Phone系统中a标签、input标签被点击时产生的半透明灰色背景是否展示。

值说明：
yes：展示。
no：不展示。
-->
<meta name = 'msApplication-tap-highlight'
      content = 'no' />
<!--
该meta项用途：
告知谷歌浏览器的某些行为。

值说明：
noSiteLinksSearchBox：告诉谷歌搜索框不显示链接。
noTranslate：告诉谷歌不要翻译这个页面。
-->
<meta name = 'google'
      content = 'noSiteLinksSearchBox,noTranslate' />
<!--
该meta项用途：
用于控制网页上的手机号、邮箱、地址、日期是否可以被识别、直接点击拨打之类的。

值说明：
yes：表示启用识别、直接点击拨打之类的。
no：表示不启用识别，会使其直接以文本表示，不能再被识别、直接点击拨打之类的。
-->
<meta name = 'format-detection'
      content = 'telephone=yes,email=yes,address=yes,date=yes' />
<!--
该meta项用途：
“googlebot”与“robots”的用途是一致的，协作“爬虫”或“机器人”应与页面一起使用的行为。

值说明：
index：默认，允许机器人索引页面。
noindex：请求机器人不索引页面。
follow：默认，允许机器人跟随页面上的链接。
nofollow：要求机器人不要跟随页面上的链接。
all：相当于index，follow。
none：相当于noindex，nofollow。
noarchive：请求搜索引擎不要缓存页面内容。
nosnippet：防止在搜索引擎结果中显示页面的任何描述。
noimageindex：请求此页面不显示为索引图像的引用页面。
nocache：noarchive的同义词。

详见：
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name
-->
<meta name = 'robots'
      content = 'all' />
<meta name = 'googlebot'
      content = 'all' />
<!--
该meta项用途：
是否全屏展示网页。

值说明：
yes：表示启用全屏。
no：默认，表示不启用全屏。
-->
<meta name = 'full-screen'
      content = 'yes' />
<meta name = 'x5-fullScreen'
      content = 'true' />
<meta name = 'touch-fullScreen'
      content = 'yes' />
<meta name = 'apple-touch-fullScreen'
      content = 'yes' />
<!--
该meta项用途：
控制网页是横屏展示还是竖屏展示。

值说明：
portrait表示竖屏。
landscape表示横屏。
-->
<meta name = 'x5-orientation'
      content = 'portrait' />
<meta name = 'screen-orientation'
      content = 'portrait' />
<!--
该meta项用途：
在iOS中，通过Safari浏览器将网页添加到主屏幕后，用于控制页面是否展示iOS的工具栏和菜单栏。

值说明：
yes：表示隐藏iOS的工具栏和菜单栏。
no：默认值，表示展示iOS的工具栏和菜单栏。
-->
<meta name = 'mobile-web-app-capable'
      content = 'yes' />
<meta name = 'apple-mobile-web-app-capable'
      content = 'yes' />
<!--
该meta项用途：
在iOS中，通过Safari浏览器将网页添加到主屏幕后，用于控制状态栏的样式。

值说明：
default：默认值，白色。
black：黑色。
black-translucent：灰色半透明。

注意：
若值为“black-translucent”将会占据页面位置，浮在页面上方（会覆盖页面20px高度，iPhone 4和iTouch 4的Retina屏幕为40px）。
-->
<meta name = 'mobile-web-app-status-bar-style'
      content = 'black-translucent' />
<meta name = 'apple-mobile-web-app-status-bar-style'
      content = 'black-translucent' />
<!--
该meta项用途：
指定一种或多种与文档兼容的配色方案，浏览器将结合用户的浏览器或设备设置使用此信息来确定从背景和前景到表单控件和滚动条的所有内容使用什么颜色。主要用途是指示与浅色和深色模式的兼容性和优先顺序。

值说明：
normal：该文档不知道配色方案，应使用默认调色板呈现。
[light|dark]+：文档支持的一种或多种配色方案。多次指定相同的配色方案与仅指定一次具有相同的效果。指示多个配色方案表示文档首选第一个方案，但如果用户喜欢，则可以接受第二个指定方案，用“,”（英文）、“|”作分隔符都无效，用空格“ ”是有效果的。
only light：表示文档只支持浅色模式，背景为浅色，前景色为深色。按照规范，“only dark”是无效的，因为当文档与文档不真正兼容时，强制文档以暗模式呈现会导致内容不可读，如果没有另外配置，所有主要浏览器都默认为轻量模式。
dark light：指示文档更喜欢深色模式，但也可以在浅色模式下进行功能渲染。
light dark：表现跟dark light一致，都是展示深色模式。

注意：
这在文档级别的工作方式与CSS的color-scheme属性允许单个元素指定其首选和接受的颜色方案相同。
您的样式可以使用prefers-color-scheme的CSS媒体功能适应当前的配色方案。

示例结果：在谷歌浏览器中
normal、light、only light：表现为浅色模式，也就是白色。
dark、dark light、light dark、only dark：表现为深色模式，也就是黑色。
-->
<meta name = 'color-scheme'
      content = 'normal' />
<!--
该meta项用途（UC浏览器）：
夜间模式：可以帮助用户在低亮度或黑暗情况下更舒适的进行页面浏览。注意：页面内的frame、iframe中的夜间模式的元不生效。

值说明：
enable：表示启用。
disable：表示不启用。
-->
<meta name = 'nightmode'
      content = 'enable' />
<!--
该meta项用途：
表示用户代理应该使用的建议颜色来自定义页面或周围用户界面的显示，该content属性包含一个有效的CSS颜色。
Android Lollipop中的Chrome 39增加主题颜色元标签，用来控制选项卡颜色。
有效的CSS颜色：https://developer.mozilla.org/en-US/docs/Web/CSS/color_value

值说明：
#0000ff：蓝色，貌似也支持这样的值：rgba(255, 255, 255, 0.98)。
-->
<% if(color !== null && color !== undefined){ %>
    <meta name = 'theme-color'
          content = '<%= color %>' />
<% } %>
<!--
该meta项用途：
Windows 8磁贴颜色。

值说明：
#0000ff：蓝色。
-->
<% if(color !== null && color !== undefined){ %>
    <meta name = 'msApplication-TileColor'
          content = '<%= color %>' />
<% } %>
<!--
该meta项用途：
与页面内容相关的单词，以逗号（英文,）分隔。
-->
<% if(keywords !== null && keywords !== undefined){ %>
    <meta name = 'keywords'
          content = '<%= keywords %>' />
<% } %>
<!--
该meta项用途：
对页面内容的简短而准确的总结。一些浏览器，如Firefox和Opera，使用它作为书签页面的默认描述。
-->
<% if(description !== null && description !== undefined){ %>
    <meta name = 'description'
          content = '<%= description %>' />
<% } %>
<!--
该meta项用途：
简短的描述网站主题，也是副标题。
-->
<% if(subject !== null && subject !== undefined){ %>
    <meta name = 'subject'
          content = '<%= subject %>' />
<% } %>
<!--
该meta项用途：
生成页面的软件的标识符。
-->
<% if(generator !== null && generator !== undefined){ %>
    <meta name = 'generator'
          content = '<%= generator %>' />
<% } %>
<!--
该meta项用途：
在网页中运行的应用程序的名称。

注意：
浏览器可以使用它来识别应用程序，它不同于title标签，通常包含应用程序名称的元素，但也可能包含文档名称或状态等信息。
简单的网页不应定义应用程序名称。
-->
<% if(appName !== null && appName !== undefined){ %>
    <meta name = 'application-name'
          content = '<%= appName %>' />
<% } %>
<!--
该meta项用途：
添加到主屏后的标题（iOS 6新增）。
-->
<% if(appName !== null && appName !== undefined){ %>
    <meta name = 'apple-mobile-web-app-title'
          content = '<%= appName %>' />
<% } %>
<!--
该meta项用途：
文档作者的姓名。
-->
<% if(author !== null && author !== undefined){ %>
    <meta name = 'author'
          content = '<%= author %>' />
<% } %>
<!--
该meta项用途：
文档发布者的名称。
-->
<% if(publisher !== null && publisher !== undefined){ %>
    <meta name = 'publisher'
          content = '<%= publisher %>' />
<% } %>
<!--
该meta项用途：
文档创建者的名称，例如组织或机构。如果有多个，则必须使用多个<meta name = 'creator' content = 'XXX' />。
-->
<% if(Array.isArray( creators )){ %>
    <% for( const creator of
            creators ){ %>
        <meta name = 'creator'
              content = '<%= creator %>' />
    <% } %>
<% } %>
<!--以上是name End-->
