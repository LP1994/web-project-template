<!--
Project: upload-for-multiple
FileDirPath: src/template/ejs/head_meta/Meta_PreOperation_001.ejs
Author: 12278
Email: 1227839175@qq.com
IDE: WebStorm
CreateDate: 2024-1-1 00:00:00 星期一
-->
<!--
预解析DNS（要跨域的域名），提高DNS的访问速度，但是要省着用，大量的DNS解析也是特耗时、耗性能的。

关于：
当浏览器从（第三方）服务器请求资源时，必须先将该跨域域名解析为IP地址，然后浏览器才能发出请求。此过程称为DNS解析。
DNS缓存可以帮助减少此延迟，而DNS解析可以导致请求增加明显的延迟。对于打开了与许多第三方的连接的网站，此延迟可能会大大降低加载性能。

考虑将dns-prefetch与preconnect(预连接)提示配对。尽管dns-prefetch仅执行DNS查找，但preconnect会建立与服务器的连接。
如果站点是通过HTTPS服务的，则此过程包括DNS解析，建立TCP连接以及执行TLS握手。将两者结合起来可提供进一步减少跨域请求的感知延迟的机会。
您可以安全地将它们一起使用，如下所示：
<link rel = 'preconnect' href = 'https://fonts.gstatic.com/' crossorigin = 'anonymous' />
<link rel = 'dns-prefetch' href = 'https://fonts.gstatic.com/' crossorigin = 'anonymous' />
如果页面需要建立与许多第三方域的连接，则将它们“预先连接”会适得其反。preconnect提示最好仅用于最关键的连接。
对于其他的，只需使用dns-prefetch即可节省第一步的时间（DNS查找）。

配对这些提示的逻辑是因为对dns-prefetch的支持比对预连接的支持要好。不支持预连接的浏览器仍然可以通过回退到dns-prefetch来获得更多好处。
由于这是HTML功能，因此非常容错。如果不支持的浏览器遇到dns-prefetch提示（或任何其他资源提示），则您的网站不会中断。您只是不会获得它提供的好处。

注意：
仅对跨域域上的DNS（如：https://fonts.gstatic.com/）查找有效，因此请避免使用它来指向您的站点或域。这是因为，到浏览器看到提示时，您站点域背后的IP已经被解析。

详细见：
https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/dns-prefetch
https://developer.mozilla.org/en-US/docs/Web/Performance/dns-prefetch
-->
<% if(Array.isArray( dnsPrefetch )){ %>
    <% for( const url of
            dnsPrefetch ){ %>
        <link rel = 'dns-prefetch'
              href = '<%= url %>'
              crossorigin = 'anonymous' />
    <% } %>
<% } %>
<!--
向浏览器提示用户可能需要来自目标资源来源的资源，因此浏览器可以通过先发制人地启动到该来源的连接来改善用户体验。

关于：
作用是告知浏览器提前连接链接地址对应站点，不过只是连接，并不会公开任何私人信息或者下载任何内容。好处是打开链接内容的时候可以更快的获取（节约了DNS查询、重定向以及指向处理用户请求的最终服务器的若干往返）。
有时也可以跟上面的“dns-prefetch”配对使用。

注意：
preconnect并不是没有成本的，千万不能滥用，只用于重要的链接。
preconnect会占用宝贵的CPU时间，如果用户没有在10秒内使用该连接，资源浪费的情况就会变得更严重，因为当浏览器关闭连接时，所有已完成的连接都将遭到浪费。

详细见：
https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preconnect
-->
<% if(Array.isArray( preconnect )){ %>
    <% for( const url of
            preconnect ){ %>
        <link rel = 'preconnect'
              href = '<%= url %>'
              crossorigin = 'anonymous' />
    <% } %>
<% } %>
<!--
预加载（preload的优先级比prefetch高，当前页面比下一个页面高），会占用当前页面的性能去预加载资源，表示用户十分有可能需要在当前浏览中加载目标资源，所以浏览器必须预先获取和缓存对应资源。
<link rel = 'preload' href = 'sintel-short.mp4' as = 'video' type = 'video/mp4' crossorigin = 'anonymous' />
<link rel = 'preload' href = 'bg-image-narrow.png' as = 'image' media = '(max-width: 600px)' crossorigin = 'anonymous' />
媒体查询：
不必局限于图像，甚至是同一类型的文件——想想看！如果用户位于带宽和CPU可能更有限的窄屏幕上，您可能可以预加载并显示一个简单的SVG图，或者预加载一个复杂的JavaScript块，然后在用户资源更丰富的情况下使用它来呈现交互式3D模型。

关于：
指定页面很快就会需要的资源，您希望在浏览器的主要呈现机制启动之前，在页面生命周期的早期开始加载这些资源。这样可以确保它们更早可用，并且不太可能阻止页面的呈现，从而提高性能。
即使名称中包含术语load，它也不会加载和执行脚本，而只是计划以更高的优先级下载和缓存脚本。

as属性的属性值有：
audio：音频文件，通常用于<audio>。
document：打算由<frame>或<iframe>嵌入的HTML文档。
embed：要嵌入<embed>元素中的资源。
fetch：fetch或XHR请求要访问的资源，例如ArrayBuffer或JSON文件。
font：字体文件。
image：图片。
object：要嵌入<object>元素中的资源。
script：脚本。
style：样式。
track：WebVTT文件。
worker：web worker或shared worker脚本。
video：视频文件，通常用于<video>。
report
audioworklet
paintworklet
serviceworker
manifest
xslt

注意：
视频预加载包含在预加载规范中，但目前尚未由浏览器实现。
在预加载规范中有关于这些值和它们期望使用的web功能的更多详细信息，请参阅：https://w3c.github.io/preload/#link-element-extensions。
还要注意，as属性可以接受的值的完整列表由Fetch规范控制，请参阅：https://fetch.spec.whatwg.org/#concept-request-destination。
不鼓励为同一资源的多种类型指定预加载。相反，最佳实践是只为大多数用户可能实际使用的类型指定预加载。

详细见：
https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload
-->
<% if(Array.isArray( preload )){ %>
    <% for( const {
        url,
        attr
    } of
            preload ){ %>
        <%= '<link rel = \'preload\'' %>
        <%= 'href = ' %> <%= url %>
        <% Object.entries( Object.assign( {}, { crossorigin: 'anonymous' }, attr ) ).forEach( ( [ keyName, keyValue ] ) => { %>
            <%= keyName %> <%= '=' %> <%= keyValue %>
        <% } ) %>
        <%= '/>' %>
    <% } %>
<% } %>
<!--
预下载（preload的优先级比prefetch高，当前页面比下一个页面高），会在浏览器空闲的时候去下载后面会用到的资源，因此浏览器可以通过抢先获取和缓存资源来改善用户体验。

详细见：
https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/prefetch
-->
<% if(Array.isArray( prefetch )){ %>
    <% for( const url of
            prefetch ){ %>
        <link rel = 'prefetch'
              href = '<%= url %>'
              crossorigin = 'anonymous' />
    <% } %>
<% } %>
<!--
预渲染，告知浏览器在背后先默默渲染页面，当用户之后导航到这个页面时候会大大加快加载速度。

详细见：
https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/prerender
-->
<% if(Array.isArray( prerender )){ %>
    <% for( const url of
            prerender ){ %>
        <link rel = 'prerender'
              href = '<%= url %>'
              crossorigin = 'anonymous' />
    <% } %>
<% } %>
<!--
预加载原生"module"脚本，可以抢先获取"module"脚本及其依赖项，并将它们存储在文档的"module"映射中，以供以后评估。

详细见：
https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/modulepreload
-->
<% if(Array.isArray( modulepreload )){ %>
    <% for( const url of
            modulepreload ){ %>
        <link rel = 'modulepreload'
              href = '<%= url %>'
              crossorigin = 'anonymous' />
    <% } %>
<% } %>
