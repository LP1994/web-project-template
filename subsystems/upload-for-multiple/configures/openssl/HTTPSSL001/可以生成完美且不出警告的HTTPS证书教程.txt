发现本机系统的OpenSSL版本默认指向：OpenSSL 1.1.1i  8 Dec 2020。
原因是因为上面安装的“StrawberryPerl”里面有一个“openssl.exe”，见：D:\StrawberryPerl\App\c\bin\openssl.exe
可以在安装、配置完后，将环境变量“D:\StrawberryPerl\App\c\bin”删除。
实在不行就进到“D:\OpenSSL\App\bin”，然后在其下进行各种证书配置操作。

Windows查看证书的命令：certmgr.msc（当前用户）、mmc（本地计算机）

关于在生成操作的过程中，对于输入值的说明：
1、以生成“HTTPSSL001_Root_CA.crt”中的输入值为基准。
2、生成“HTTPSSL001_Servers_CA.csr”时，输入值中除了“Common Name”、“Organizational Unit Name”选项的值可以跟“基准”的“Common Name”、“Organizational Unit Name”选项的值不一样（最好不一样），其他选项值都必须跟“基准”的一样。
3、生成“HTTPSSL001_Clients_CA.csr”时，输入值中除了“Common Name”、“Organizational Unit Name”选项的值可以跟“基准”的“Common Name”、“Organizational Unit Name”选项的值不一样（最好不一样），其他选项值都必须跟“基准”的一样。
4、多个“服务端CA证书”之间的输入值中，“Organizational Unit Name”选项的值必须一样。
5、多个“客户端CA证书”之间的输入值中，“Organizational Unit Name”选项的值必须一样。
6、多个“服务端CA证书”之间的输入值中，“Common Name”选项的值可以是各自不同的域名、IP，且该值也这只能是域名、IP。当然在生成的过程中可以通过设置“subjectAltName”来设置多个域名、IP别名。
7、多个“客户端CA证书”之间的输入值中，“Common Name”选项的值可以是各自不同的域名、IP，且该值也这只能是域名、IP。但生成的过程中不可以通过设置“subjectAltName”来设置多个域名、IP别名，会导致证书无法被浏览器使用。



1、生成“私钥，HTTPSSL001_Root_CA_Key.key”：
对于生成用于网站的HTTPS自定义证书（并不是所有的支持端都有一个类似“密码”的选项，它是用于解码加了密的私钥），不要对“私钥，HTTPSSL001_Root_CA_Key.key”进行加密处理（使用“openssl genrsa -aes256”这个就是启用加密）：
openssl genrsa -out HTTPSSL001_Root_CA_Key.key 4096



2、生成“根CA证书，HTTPSSL001_Root_CA.crt”：
openssl req -x509 -config openssl.cnf -new -nodes -key HTTPSSL001_Root_CA_Key.key -days 365 -out HTTPSSL001_Root_CA.crt
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:GuangZhou
Organization Name (eg, company) [HTTPSSL001]:HTTPSSL001
Organizational Unit Name (eg, section) [IT]:IT
Common Name (e.g. server FQDN or YOUR name) [192.168.2.7]:HTTPSSL001_Root_CA
Email Address [2726893248@qq.com]:2726893248@qq.com

生成的一个可读版本来验证“根CA证书，HTTPSSL001_Root_CA.crt”的内容：
openssl x509 -noout -text -in HTTPSSL001_Root_CA.crt
执行输出：
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            4c:c4:6e:a1:1d:77:be:1b:ef:1d:c3:fa:5e:f4:75:fe:ef:c9:2c:69
        Signature Algorithm: sha512WithRSAEncryption
        Issuer: C=CN, ST=GuangDong, L=GuangZhou, O=HTTPSSL001, OU=IT, CN=HTTPSSL001_Root_CA, emailAddress=2726893248@qq.com
        Validity
            Not Before: Aug  8 15:30:53 2024 GMT
            Not After : Aug  8 15:30:53 2025 GMT
        Subject: C=CN, ST=GuangDong, L=GuangZhou, O=HTTPSSL001, OU=IT, CN=HTTPSSL001_Root_CA, emailAddress=2726893248@qq.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:bf:1b:12:85:4d:d4:89:b3:81:f0:47:97:07:66:
                    27:c9:43:f7:17:f6:65:49:01:95:dc:03:c4:28:d2:
                    04:53:04:55:bd:9f:74:0d:4e:c7:e8:0a:d1:a9:d4:
                    44:38:94:69:a2:f7:68:f6:fc:1c:22:58:d9:08:eb:
                    0a:55:22:6f:fb:89:3b:6f:22:a5:b5:82:db:2e:14:
                    35:80:3f:7b:1b:2c:64:ff:c8:6c:74:20:6b:c2:50:
                    ed:82:4b:03:01:d0:6e:1d:ca:7d:17:34:47:a1:f1:
                    2b:78:a5:c4:26:ba:77:3c:68:04:53:0b:43:3d:39:
                    e9:08:0b:b8:05:d2:f4:10:e3:64:02:ed:13:37:ee:
                    dc:6e:5e:73:e1:7e:30:2e:8d:5e:a0:27:fe:f4:3c:
                    5b:46:50:29:89:29:86:88:cb:68:9d:89:9b:f8:08:
                    da:db:82:9a:2e:a5:25:5c:31:bb:07:dc:f3:dc:d2:
                    49:2d:02:c8:e8:bd:2d:1b:f9:da:90:6b:2a:9b:cd:
                    6f:c1:56:23:e4:8b:cb:25:76:b4:6b:01:67:d9:fc:
                    55:71:c0:28:08:fc:28:9a:7c:ff:d3:99:36:51:b7:
                    f7:a1:6f:42:ec:e0:2a:85:35:56:c7:7f:e2:42:d0:
                    51:f3:55:5e:09:76:0c:05:b6:cf:bc:0d:c3:30:06:
                    ba:2b:45:9d:8c:66:14:4c:ed:89:ef:62:bc:ef:03:
                    42:93:a4:1f:86:72:ae:b2:9c:1e:1f:a3:e2:e0:74:
                    07:89:63:15:cc:e3:d8:90:50:bb:06:c4:26:9c:78:
                    34:58:ef:6f:e5:9a:71:ec:e1:98:cc:23:bf:3f:bf:
                    50:80:a0:16:f7:15:ed:e7:e0:eb:20:86:de:18:a9:
                    6b:9f:67:81:68:dd:1e:d0:48:2e:11:01:d7:43:e5:
                    57:0c:22:2b:b6:0b:e1:69:c3:09:23:25:8d:c0:d2:
                    49:b9:4d:0c:7d:e7:f8:5e:f9:35:32:4c:72:17:4f:
                    4e:37:4c:7e:2c:4a:4a:8b:3d:a7:51:a1:be:01:ef:
                    c1:09:0c:e5:83:50:c4:ad:a3:7f:86:bd:36:26:1a:
                    b9:00:cf:14:cb:26:8f:74:63:4d:3f:59:21:4d:c0:
                    1b:cf:f6:3f:83:3c:f7:2d:59:6b:13:aa:cb:9e:69:
                    6d:a9:49:05:49:8f:ce:30:19:35:31:2f:82:aa:a6:
                    c1:17:31:aa:d1:ac:13:5d:23:76:7d:16:27:5f:0a:
                    e1:00:8e:62:74:2b:72:78:5e:cd:57:67:42:95:a8:
                    b9:98:5e:df:4a:f7:48:b7:60:3a:9b:a6:35:72:55:
                    89:8b:35:ce:4c:40:42:b7:12:93:ae:a8:ca:83:6b:
                    47:ef:69
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                2D:CD:91:7F:37:FC:6C:BE:1C:2A:A6:BC:AD:D0:88:7C:A6:9D:A4:35
            X509v3 Authority Key Identifier:
                2D:CD:91:7F:37:FC:6C:BE:1C:2A:A6:BC:AD:D0:88:7C:A6:9D:A4:35
            X509v3 Basic Constraints: critical
                CA:TRUE
    Signature Algorithm: sha512WithRSAEncryption
    Signature Value:
        bc:11:13:b8:6b:f1:1f:06:15:f6:b3:e7:ca:35:a4:c5:cb:ee:
        6e:b2:60:62:6c:c2:e0:b2:6a:68:1e:76:28:47:97:51:1b:cd:
        63:36:a3:b0:89:3b:1c:21:ae:f6:58:fd:2e:7b:64:a2:b2:21:
        88:db:3f:95:07:80:e1:04:b9:62:c1:47:ec:8e:d8:91:a8:50:
        57:7d:39:1e:8b:b3:60:f4:a2:e2:40:bd:bf:30:b2:1e:6e:6f:
        fd:5e:e7:cb:0e:c4:f5:ce:1a:85:4f:19:8b:3c:b2:d5:6f:ca:
        6b:4a:3e:d2:ef:8b:c5:90:2b:76:18:45:49:62:a1:90:29:1f:
        86:8f:4d:1c:61:8d:f1:c1:9e:0a:01:7f:06:37:16:91:29:bf:
        37:19:0b:21:b4:14:e4:a5:ab:dc:28:59:1c:7f:0d:76:77:60:
        0e:ce:9a:fd:26:e9:cb:81:02:0e:47:62:b6:25:01:8c:14:ea:
        1f:e5:33:94:d0:64:5b:0d:1e:10:04:5f:60:96:88:67:e1:81:
        d4:c6:7e:ce:b1:8f:39:ae:17:ab:23:7d:02:79:70:af:c0:7e:
        39:e7:28:08:f4:c4:1d:cb:7d:47:1f:19:3f:53:fd:fb:86:6c:
        41:5e:eb:26:58:a3:d0:62:67:05:c5:f3:4b:29:cb:c4:07:27:
        05:7c:9a:b8:e0:b6:13:cf:ba:d8:4c:ab:3f:41:d6:0a:2e:b7:
        36:b8:59:5d:df:e0:64:6b:fb:0f:ea:99:be:50:4a:7a:15:12:
        fc:2a:da:8b:73:ef:fa:38:7a:09:50:73:b5:b9:66:79:6e:8e:
        65:3d:46:0d:53:9e:7f:dd:27:97:52:2f:a6:dd:69:ab:41:97:
        bd:cb:0f:ed:e8:68:62:de:b4:15:30:b6:fa:83:c1:2d:9e:4d:
        ee:3c:31:02:1e:bb:9a:a7:7b:8e:ed:a5:f0:d9:96:c2:fc:36:
        dc:bc:98:96:e1:02:88:4e:97:87:e6:6d:58:b5:c6:82:78:26:
        50:4b:8d:01:5e:13:cc:2b:4a:56:d7:12:5f:63:6a:77:83:1d:
        70:60:21:17:2d:f8:4f:42:f5:6f:98:0c:29:29:ce:13:00:38:
        0e:d1:4b:59:c5:ea:8b:8b:d1:78:98:4b:8f:47:25:36:1a:4c:
        a1:3b:83:5d:a1:44:8b:f6:3b:be:8d:92:99:24:b5:91:57:6b:
        24:6a:a4:1e:53:b7:6b:43:6f:43:f3:2f:83:14:bd:71:17:0b:
        11:24:2b:34:28:77:43:af:43:90:da:9f:6b:20:cc:77:0f:f2:
        d7:0a:3b:a2:2b:a7:c8:63:51:3e:6d:b5:a6:15:53:e9:83:e0:
        83:41:bb:b7:f9:38:33:53



3、生成一个用于生成“服务端CA证书”的“证书签名请求，HTTPSSL001_Servers_CA.csr”：
openssl req -new -key HTTPSSL001_Root_CA_Key.key -out HTTPSSL001_Servers_CA.csr -config openssl.cnf
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:GuangZhou
Organization Name (eg, company) [HTTPSSL001]:HTTPSSL001
Organizational Unit Name (eg, section) [IT]:HTTPSSL001_Servers
Common Name (e.g. server FQDN or YOUR name) [192.168.2.7]:HTTPSSL001_CommonName
Email Address [2726893248@qq.com]:2726893248@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:@HTTPSSL001.2024#
An optional company name [HTTPSSL001]:HTTPSSL001



4、生成一个用于生成“客户端CA证书”的“证书签名请求，HTTPSSL001_Clients_CA.csr”：
openssl req -new -key HTTPSSL001_Root_CA_Key.key -out HTTPSSL001_Clients_CA.csr -config openssl.cnf
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:GuangZhou
Organization Name (eg, company) [HTTPSSL001]:HTTPSSL001
Organizational Unit Name (eg, section) [IT]:HTTPSSL001_Clients
Common Name (e.g. server FQDN or YOUR name) [192.168.2.7]:HTTPSSL001_CommonName
Email Address [2726893248@qq.com]:2726893248@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:@HTTPSSL001.2024#
An optional company name [HTTPSSL001]:HTTPSSL001



5、生成“服务端CA证书，HTTPSSL001_Servers_CA.crt”：
1）：
openssl x509 -req -in HTTPSSL001_Servers_CA.csr -CA HTTPSSL001_Root_CA.crt -CAkey HTTPSSL001_Root_CA_Key.key -CAcreateserial -out HTTPSSL001_Servers_CA.crt -days 365 -sha512 -extfile https.ext
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = GuangZhou, O = HTTPSSL001, OU = HTTPSSL001_Servers, CN = HTTPSSL001_CommonName, emailAddress = 2726893248@qq.com
2）：
type HTTPSSL001_Servers_CA.crt > HTTPSSL001_Servers_CA.pem
3）：
type HTTPSSL001_Root_CA_Key.key >> HTTPSSL001_Servers_CA.pem



6、生成“客户端CA证书，HTTPSSL001_Clients_CA.crt”：
1）：
openssl x509 -req -in HTTPSSL001_Clients_CA.csr -CA HTTPSSL001_Root_CA.crt -CAkey HTTPSSL001_Root_CA_Key.key -CAcreateserial -out HTTPSSL001_Clients_CA.crt -days 365 -sha512
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = GuangZhou, O = HTTPSSL001, OU = HTTPSSL001_Clients, CN = HTTPSSL001_CommonName, emailAddress = 2726893248@qq.com
2）：
type HTTPSSL001_Clients_CA.crt > HTTPSSL001_Clients_CA.pem
3）：
type HTTPSSL001_Root_CA_Key.key >> HTTPSSL001_Clients_CA.pem



7、将“根CA证书，HTTPSSL001_Root_CA.crt”打包为“p12格式，HTTPSSL001_Root_CA.p12”：
openssl pkcs12 -export -clcerts -in HTTPSSL001_Root_CA.crt -inkey HTTPSSL001_Root_CA_Key.key -out HTTPSSL001_Root_CA.p12 -password pass:@HTTPSSL001.2024#
执行输出：
Warning: -clcerts option ignored with -export



8、还得将输出的“HTTPSSL001_Root_CA.p12”的内容转换为“base64”编码的新文件“HTTPSSL001_Root_CA.p12.base64”。
Windows系统上用Node写一个转换就行了，代码如下：
'use strict';

import {
  readFileSync,
  writeFileSync,
} from 'node:fs';

import {
  dirname,
  join,
} from 'node:path';

import {
  fileURLToPath,
} from 'node:url';

function Get__dirname( import_meta_url = import.meta.url ){
  return dirname( Get__filename( import_meta_url ) );
}

function Get__filename( import_meta_url = import.meta.url ){
  return fileURLToPath( import_meta_url );
}

const __dirname = Get__dirname( import.meta.url );

writeFileSync(
  join( __dirname, './HTTPSSL001_Root_CA.p12.base64' ),
  readFileSync( join( __dirname, './HTTPSSL001_Root_CA.p12' ) ).toString( 'base64' )
);
