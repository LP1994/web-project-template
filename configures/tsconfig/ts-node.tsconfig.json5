/*
Project: web-project-template
FileDirPath: configures/tsconfig/ts-node.tsconfig.json5
Author: 12278
Email: 1227839175@qq.com
IDE: WebStorm
CreateDate: 2022-01-01 00:00:00 星期六
*/

{
  "display": "ts-node.tsconfig.json5",
  "_version": "1.0.0",
  "_ts-node_version": "10.9.1",
  "_typescript_version": "5.0.4",
  "_description": "这是给基于ts-node运行TypeScript的Node一类的项目使用的基本通用的tsconfig.json。",
  "$schema": "https://json.schemastore.org/tsconfig",
  "docs": "https://www.typescriptlang.org/tsconfig",
  "_ts-node_schema": "https://unpkg.com/ts-node/tsconfig.schema.json",
  "_ts-node_docs": "https://typestrong.org/ts-node/docs",
  "extends": "./bases.tsconfig.json5",
  "ts-node": {
    /*
    指定自定义的TypeScript编译器。
    */
    "compiler": "typescript",
    /*
    使用TypeScript的编译器主机API而不是语言服务API。
    */
    "compilerHost": false,
    /*
    将输出文件发射到“.ts-node”目录，依赖选项“compilerHost”。
    */
    "emit": false,
    /*启用原生的ESM支持。*/
    "esm": true,
    /*
    允许在REPL中使用顶级Await。    
    使用Node的实现，通过AST语法转换实现这一点。
    当tsconfig目标为es2018或更高版本时，默认启用。设置为false将禁用。
    注意：如果tsconfig目标太低，则设置为“true”将引发错误。保留为"undefined"，以获得默认的自动行为。
    */
    "experimentalReplAwait": true,
    /*
    启用重新映射导入并需要调用支持的实验性挂钩。
    重新映射扩展，例如这样 import "./foo.js" 就会执行 foo.ts。目前将映射以下扩展：
    .js to .ts, .tsx, or .jsx
    .cjs to .cts
    .mjs to .mts
    .jsx to .tsx
    包括 CommonJS 中的文件扩展名，以与 ESM 保持一致，这通常是强制性的。
    未来，这个钩子还将支持：
    baseUrl、paths、rootDirs、复合项目和 monorepos 的 outDir 到 rootDir 映射
    默认值：false，但可能会在未来版本中默认启用 只能通过 tsconfig.json 或 API 指定。
    */
    "experimentalResolver": false,
    /*
    有两个有效值：explicit（默认值）、node。
    与node的--experimental-specifier-resolution一样，但也可以在tsconfig.json中设置以方便使用。需要启用选项esm。
    */
    // "experimentalSpecifierResolution": "node",
    /*
    允许使用".ts"导入说明符中的文件扩展名。
    通常，在ESM项目中，导入说明符必须具有扩展名“.js”、“cjs”、“.mjs”，
    并且我们自动映射到相应的“.ts”、“.cts”、“.mts”的源文件。这是建议的方法。
    但是，如果您真的想使用“.ts”在导入说明符中，并且知道这可能break工具，您可以启用此标志。
    */
    "experimentalTsImportSpecifiers": true,
    /*
    在启动时从tsconfig.json加载files、include、exclude等选项。这可以避免某些类型检查的失败。详见缺失的类型（https://typestrong.org/ts-node/docs/troubleshooting#missing-types）。
    true表示启用上面说的那种情况。
    */
    "files": false,
    /*
    不应编译的路径。
    */
    /*
    "ignore": [
      "./dist",
      "./node_modules",
      "./bower_components",
      "./jspm_packages"
    ],
    */
    /*
    通过诊断代码忽略TypeScript的警告。
    */
    // "ignoreDiagnostics": [],
    /*
    将TypeScript错误记录到stderr，而不是引发异常。
    */
    "logError": false,
    /*
    重新排序文件扩展名，以便首选TypeScript导入，优先解析“.ts”的文件。
    */
    "preferTsExts": true,
    /*
    使用漂亮的诊断格式化程序。
    */
    "pretty": true,
    /*
    要请求的模块，如节点的“--require”标志。
    */
    // "require": [],
    /*
    将编译器作用域设置为“scopeDir”内的文件。
    */
    // "scope": false,
    /*
    启用“scope”时编译器在其中受到限制的目录。
    默认情况下。第一个：tsconfig.json "rootDir"，如果指定了，包含tsconfig.json的目录，或cwd，如果没有加载tsconfig.json。
    */
    // "scopeDir": "",
    /*
    跳过忽略检查，以便尝试对具有匹配扩展名的所有文件进行编译。
    */
    "skipIgnore": false,
    /*
    用swc进行transpile。意味着--transpileOnly。
    使用swc而不是TypeScript编译器进行传输，并跳过类型检查。
    1、等效于同时设置transpileOnly: true和transpiler: 'ts-node/transpilers/swc'。
    2、有关完整说明：https://typestrong.org/ts-node/docs/transpilers。
    */
    "swc": false,
    /*
    true表示仅仅只是转译而跳过类型检查，这样会更快；false表示不仅转译还要启用类型检查，这个也是默认值。
    1、使用TypeScript更快的“transpileModule”。
    */
    "transpileOnly": false,
    /*
    指定用于transpileOnly的自定义transpiler。
    */
    // "transpiler": "ts-node/transpilers/swc",
    /*
    已弃用。它的true可用选项transpileOnly:false代替。
    */
    // "typeCheck": true,
  },
  "compilerOptions": {
    /*
    指定TypeScript如何从给定“模块说明符（也就是导入文件时写的字符串形式的文件路径）”中查找文件。
    1、如果“module”选项值是amd、umd、system或es6（别名：es2015），该选项默认值为classic，如果“module”选项值是node16、nodenext，该选项默认值为node。
    2、允许的值有：classic、node、node16、nodenext、bundler（TypeScript 5.0新增的，见：https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/#moduleresolution-bundler）。
    3、选项值node用于Node.js的CommonJS实现。
    4、选项值node16、nodenext从TypeScript 4.5开始，用于Node.js的ECMAScript模块支持。
    5、选项值classic用于TypeScript 1.6之前的版本。您可能不需要在现代代码中使用“classic”值。
    6、该选项值为“node”值时，决定了“resolveJsonModule”选项值为true时的有效设置并启用。
    7、设置成“node”时，路径必须以“./”、“../”这样的相对路径打头，否则会报错，设置成“classic”就不会有这个问题。
    8、如果未指定，则默认为Node for --module commonjs，否则为classic（包括将module设置为amd、system、umd、es2015、esnext等时）。
    9、如果您在TypeScript中遇到导入和导出的解析问题，请尝试设置moduleResolution: "node" 以查看它是否解决了问题。
    10、强烈建议设置成：node、node16、nodenext其中之一，并且尽可能以“相对路径”（./、../）或“设置路径别名”来作为导入路径中的打头开始。
    11、优先设置成“node”，可以解决很多情况下的报错！
    12、TypeScript 4.7为--module和--moduleResolution设置引入了“node16”和“nodenext”选项。
    这些选项的意图是为了更好地模拟Node.js中ECMAScript模块的精确查找规则。然而，这种模式有许多限制，其他工具并没有真正执行。
    例如，在Node.js中的ECMAScript模块中，任何相对导入都需要包括一个文件扩展名。
    13、但是对于许多使用捆绑器等工具的开发者来说，node16、nodenext的设置是很麻烦的，因为捆绑器没有大部分的这些限制。
    在某些方面，设置成“node”解析模式对任何使用捆绑器的人来说都是更好的。
    但在某些方面，最初的“node”解析模式已经过时了。
    大多数现代捆绑器在Node.js中使用了ECMAScript模块和CommonJS查询规则的融合。
    例如，无扩展的导入和CommonJS中一样，可以正常工作，但是当翻看一个包的导出条件时，他们会像ECMAScript文件中一样，更喜欢导入条件。
    14、为了模拟捆绑器的工作方式，TypeScript现在引入了一个新的策略：bundler，如果你正在使用现代捆绑器，如Vite、esbuild、swc、Webpack、Parcel和其他实施混合查找策略的捆绑器，新的捆绑器选项值“bundler”应该很适合你。
    另一方面，如果你正在编写一个要在npm上发布的库，使用“bundler”选项值可以隐藏可能出现的兼容性问题，因为你的用户并没有使用捆绑器。
    所以在这些情况下，使用node、node16或nodenext解析选项可能是一个更好的途径。
    */
    "moduleResolution": "node",
  },
}
