生成HTTPS证书流程



第1步生成“私钥”：HTTPSRootCAKey.key
在“生产环境”中，需要对“私钥，HTTPSRootCAKey.key”进行加密保护：
openssl genrsa -aes256 -out HTTPSRootCAKey.key 4096
执行输出：
Enter PEM pass phrase: @HTTPSRootCA.2022001A#
Verifying - Enter PEM pass phrase: @HTTPSRootCA.2022001A#



第2步生成“根证书/根CA”：HTTPSRootCA.crt
使用openssl req命令来创建“根证书/根CA，HTTPSRootCA.crt”。由于“根证书/根CA，HTTPSRootCA.crt”是权威链的最顶端，因此使用上一步创建的“私钥，HTTPSRootCAKey.key”对此“根证书/根CA，HTTPSRootCA.crt”进行自签名。-x509选项会通知openssl req命令我们希望使用提供给-key选项的“私钥，HTTPSRootCAKey.key”对“根证书/根CA，HTTPSRootCA.crt”进行自签名。输出是一个名为HTTPSRootCA.crt的“根证书/根CA，HTTPSRootCA.crt”文件：
openssl req -new -x509 -days 365 -key HTTPSRootCAKey.key -out HTTPSRootCA.crt -config openssl.cnf
执行输出：
Enter pass phrase for HTTPSRootCAKey.key:@HTTPSRootCA.2022001A#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [HTTPSRootCA2022001]:HTTPSRootCA2022001
Organizational Unit Name (eg, section) [HTTPSRootCA001]:HTTPSRootCA001
Common Name (e.g. server FQDN or YOUR name) [HTTPSRootCA2022001]:HTTPSRootCA2022001
Email Address [1227839175@qq.com]:1227839175@qq.com



如果看一下“根证书/根CA，HTTPSRootCA.crt”文件，你会发现它包含了“根证书/根CA，HTTPSRootCA.crt”的公共证书。可以查看由以下命令
生成的一个可读版本来验证其内容：
openssl x509 -noout -text -in HTTPSRootCA.crt
输出：
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            51:b7:cd:4b:10:92:77:76:e7:fe:6b:7b:96:ed:0d:73:b6:37:80:cb
        Signature Algorithm: sha512WithRSAEncryption
        Issuer: C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSRootCA2022001, OU = HTTPSRootCA001, CN = HTTPSRootCA2022001, emailAddress = 1227839175@qq.com
        Validity
            Not Before: Dec  4 21:27:22 2022 GMT
            Not After : Dec  4 21:27:22 2023 GMT
        Subject: C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSRootCA2022001, OU = HTTPSRootCA001, CN = HTTPSRootCA2022001, emailAddress = 1227839175@qq.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:dc:d1:33:4b:35:00:59:48:b8:5a:8c:37:4e:00:
                    0b:08:02:a8:e9:53:56:08:7d:67:dc:0b:63:e2:f2:
                    ac:b1:5a:fd:b9:ef:b8:cd:bd:7d:cf:4d:ef:15:63:
                    4a:ce:15:bd:f0:d6:df:9e:79:50:f3:0d:a9:99:22:
                    51:91:5a:4c:8a:2d:60:52:4f:1b:ce:46:51:36:10:
                    4f:2f:ab:c3:0b:bf:d3:af:61:d4:a6:d0:57:a2:d0:
                    4d:d4:ce:8f:1d:9e:79:ad:be:c7:7b:bc:77:d3:62:
                    c7:11:b4:7f:80:ab:b9:2e:da:32:1a:ea:06:94:18:
                    42:6c:ee:74:58:a5:35:2e:14:9a:4b:ad:7f:09:53:
                    e1:54:ab:48:55:34:6e:4d:b8:11:0b:da:ed:10:1a:
                    6b:3c:a5:36:1c:7a:56:e5:99:15:64:9a:92:fa:ca:
                    c2:73:bd:8b:15:5e:74:18:32:e4:79:17:54:b2:9a:
                    7f:56:dd:c2:1f:14:bb:e0:cf:c1:db:d6:9a:f3:98:
                    6b:22:7c:dc:8b:33:98:42:e4:77:e4:75:8d:ac:62:
                    3d:a5:94:c6:bf:96:03:24:f3:dc:a1:a7:e0:b4:48:
                    fc:bb:e3:af:70:10:8c:8c:37:4b:5a:8c:f7:40:5f:
                    4e:6b:e2:81:ce:de:48:59:bb:5d:75:a8:f0:86:c3:
                    69:32:ae:a0:ac:32:00:5d:b4:da:09:b3:24:58:dd:
                    4c:a1:61:07:5d:74:3d:79:72:53:42:60:41:13:36:
                    93:06:e5:bc:f7:96:4f:5f:14:f5:51:8c:8d:66:10:
                    44:6e:1d:c1:53:8e:33:df:58:65:70:b9:b0:2e:c4:
                    61:e2:17:e7:52:6b:9a:86:4c:6d:c3:62:d0:fa:99:
                    4e:87:33:f4:a8:4e:80:98:1f:da:8b:6b:58:4a:42:
                    c3:60:49:41:48:16:a6:ed:0b:41:b4:0c:89:55:59:
                    56:1e:3c:06:d1:eb:03:2e:39:b5:c1:f2:da:e0:e5:
                    22:f1:13:49:64:af:a4:08:4c:ef:f7:4b:be:ce:d7:
                    8e:53:70:45:3d:2c:d1:ea:0a:ba:1f:63:9c:fa:5d:
                    70:10:17:85:0b:cc:7b:49:f2:1a:f6:21:93:1b:bd:
                    1f:e7:0f:b6:5f:bc:2c:f7:4c:12:3b:d9:c5:db:19:
                    a1:5e:eb:9e:f0:39:25:e7:01:ea:ea:d5:dd:08:0d:
                    0c:f2:6a:09:47:b4:a6:0a:fe:a5:5f:3a:31:56:09:
                    d3:fc:ae:85:1d:ab:1d:c3:78:7c:9a:c1:6a:71:8e:
                    ee:5c:9d:46:7b:8c:f2:39:e2:23:14:4f:80:62:ec:
                    51:72:61:14:61:41:af:5e:25:a3:ff:17:aa:e4:75:
                    ef:a5:bd
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                6F:90:C2:F8:DC:19:BC:77:93:66:0F:9F:03:31:09:17:56:74:F6:6B
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Authority Key Identifier:
                keyid:6F:90:C2:F8:DC:19:BC:77:93:66:0F:9F:03:31:09:17:56:74:F6:6B
                DirName:/C=CN/ST=GuangDong/L=ShenZhen/O=HTTPSRootCA2022001/OU=HTTPSRootCA001/CN=HTTPSRootCA2022001/emailAddress=1227839175@qq.com
                serial:51:B7:CD:4B:10:92:77:76:E7:FE:6B:7B:96:ED:0D:73:B6:37:80:CB
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
    Signature Algorithm: sha512WithRSAEncryption
    Signature Value:
        13:a8:52:df:b8:ca:df:35:74:1e:2d:27:f6:7d:cc:08:b8:ae:
        f8:e0:e7:60:1f:81:4f:7b:78:8b:ed:3a:0f:81:29:70:55:9d:
        b4:64:d0:b6:03:19:47:23:e7:9c:42:77:6e:85:7e:02:fb:14:
        f7:08:34:cf:22:2d:ae:a3:d6:61:52:78:d9:22:5b:91:c7:8d:
        4c:4e:74:9b:04:b6:e2:05:fc:8b:59:e2:68:e0:33:15:0d:f4:
        ec:d1:14:8e:0d:4f:9a:1d:f6:e7:5a:f7:ba:ec:4e:c5:ce:9a:
        c4:5d:51:bf:f9:c4:42:da:44:63:eb:62:7b:9a:ad:6e:b7:4d:
        ce:e6:75:31:5a:0a:0f:52:96:83:44:08:f6:54:93:2d:20:25:
        65:47:0b:95:9f:3e:f4:4d:fa:72:68:51:3f:b9:e5:52:d2:fd:
        f5:c9:34:6d:e0:be:80:03:1c:0b:e5:15:4c:bf:8c:ff:5d:85:
        de:20:5a:a0:9c:87:79:0d:d9:c8:2b:47:d1:e5:10:7f:6d:a1:
        c7:0a:dd:c4:aa:30:d6:88:04:ba:a2:89:ca:63:8b:85:19:ed:
        1d:83:71:91:e5:e6:59:bf:f5:f9:25:c6:1e:8f:88:48:65:d4:
        d1:8e:60:86:ee:2e:ec:ce:ac:ec:ee:45:54:dd:67:9d:ab:8b:
        8f:e5:3a:eb:08:5f:aa:15:cf:fd:9b:ed:3a:dd:62:7f:44:26:
        8e:84:f3:4d:32:22:69:2b:c6:08:4e:d9:fb:93:2d:7c:32:03:
        03:2c:53:d5:cb:60:e1:fc:0d:20:97:8b:ba:90:47:28:b6:36:
        5e:88:39:98:1b:fb:68:b4:e8:9b:dc:f6:7c:c1:c5:a7:d1:42:
        8a:dd:09:1e:48:6b:f9:e8:07:10:fd:dd:03:29:13:e1:bf:f8:
        b3:0f:2b:29:f2:1b:1a:56:21:f3:55:21:a1:4f:07:89:f9:88:
        8f:6c:71:68:40:03:2a:a0:73:79:3d:36:d3:3d:cc:31:b1:84:
        dd:6e:82:be:18:60:59:55:05:14:b8:3b:c9:3f:8e:8f:e7:d5:
        e8:38:74:e9:81:48:ba:41:e6:ec:26:37:02:9c:67:90:5c:49:
        ea:21:96:6f:f7:ae:92:54:16:64:02:44:1b:5a:4f:26:65:9c:
        36:42:7d:32:93:56:0d:cd:6b:73:02:b7:02:41:34:45:23:aa:
        28:17:78:67:82:d5:50:70:75:42:25:35:c3:9a:a5:8f:33:d6:
        79:28:af:0d:bd:12:03:3a:fb:20:69:d8:2f:30:21:17:a4:3d:
        46:22:fa:35:44:fa:a1:2c:ad:e9:ed:3c:6e:d5:51:42:40:0a:
        4b:29:b0:b8:e6:e4:37:1d



第3步根据上面的第2步创建的“根证书/根CA，HTTPSRootCA.crt”再一次创建用于对“成员证书/x.509服务器证书”和“客户端证书”进行签名的“中间签名CA，HTTPSMiddlemanSigningCA.crt”：
1）先再次生成一个“私钥，HTTPSMiddlemanSigningCAKey.key”：
在“生产环境”中，需要对“私钥，HTTPSMiddlemanSigningCAKey.key”进行加密保护：
openssl genrsa -aes256 -out HTTPSMiddlemanSigningCAKey.key 4096
执行输出：
Enter PEM pass phrase: @HTTPSMiddlemanSigningCA.2022001A#
Verifying - Enter PEM pass phrase: @HTTPSMiddlemanSigningCA.2022001A#

2）再执行：
openssl req -new -key HTTPSMiddlemanSigningCAKey.key -out HTTPSMiddlemanSigningCA.csr -config openssl.cnf
执行输出：
Enter pass phrase for HTTPSMiddlemanSigningCAKey.key:@HTTPSMiddlemanSigningCA.2022001A#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [HTTPSMiddlemanSigningCA2022001]:HTTPSMiddlemanSigningCA2022001
Organizational Unit Name (eg, section) [HTTPSMiddlemanSigningCA001]:HTTPSMiddlemanSigningCA001
Common Name (e.g. server FQDN or YOUR name) [HTTPSMiddlemanSigningCA2022001]:HTTPSMiddlemanSigningCA2022001
Email Address [1227839175@qq.com]:1227839175@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password [20220101]:20220101
An optional company name [HTTPSMiddlemanSigningCA2022001]:HTTPSMiddlemanSigningCA2022001

3）最后执行：
openssl x509 -req -days 365 -in HTTPSMiddlemanSigningCA.csr -CA HTTPSRootCA.crt -CAkey HTTPSRootCAKey.key -set_serial 01 -out HTTPSMiddlemanSigningCA.crt -extfile openssl.cnf -extensions v3_ca
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSMiddlemanSigningCA2022001, OU = HTTPSMiddlemanSigningCA001, CN = HTTPSMiddlemanSigningCA2022001, emailAddress = 1227839175@qq.com
Enter pass phrase for HTTPSRootCAKey.key:@HTTPSRootCA.2022001A#



第4步：HTTPSRootCA.pem
需要将“根证书/根CA，HTTPSRootCA.crt”（包含根公钥）和“中间签名CA，HTTPSMiddlemanSigningCA.crt”（包含签名公钥）
连接到一个“pem文件（HTTPSRootCA.pem）”中。这个文件（HTTPSRootCA.pem）稍后将提供给“服务端”使用。
1）先执行：
type HTTPSRootCA.crt > HTTPSRootCA.pem
2）再执行：
type HTTPSMiddlemanSigningCA.crt >> HTTPSRootCA.pem



创建用于“服务端集群”中身份验证的“成员证书/x.509服务器证书”（可以有多个）和“客户端证书”（可以有多个）。



第5步：“成员证书/x.509服务器证书”，可以有多个，现在假定只创建一个“HTTPSServers_192_168_10_101_CA.crt”。
“成员证书”通常称为“x.509服务器证书”。应该对“服务端”使用该类型的证书（成员证书/x.509服务器证书）。
“服务端集群成员”会使用这些证书（成员证书/x.509服务器证书）来验证集群中的“成员身份”。换句话说，“服务端”就是用“成员证书/x.509服务器证书”来为“服务端的其他成员”提供“身份验证”的。
1）创建新的“私钥，HTTPSServers_192_168_10_101_Key.key”：
这里就不用进行加密：
openssl genrsa -out HTTPSServers_192_168_10_101_Key.key 4096

2）为“私钥，HTTPSServers_192_168_10_101_Key.key”生成“成员证书/x.509服务器证书的签名请求，HTTPSServers_192_168_10_101.csr”：
openssl req -new -key HTTPSServers_192_168_10_101_Key.key -out HTTPSServers_192_168_10_101.csr -config openssl.cnf
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [HTTPSServers_192_168_10_101_001]:HTTPSServers_192_168_10_101_001
Organizational Unit Name (eg, section) [HTTPSServers_192_168_10_101]:HTTPSServers_192_168_10_101
Common Name (e.g. server FQDN or YOUR name) [192.168.10.101]:192.168.10.101
Email Address [1227839175@qq.com]:1227839175@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password [20220101001]:20220101001
An optional company name [HTTPSServers_192_168_10_101_001]:HTTPSServers_192_168_10_101_001

3）通过“中间签名CA，HTTPSMiddlemanSigningCA.crt”对“成员证书/x.509服务器证书”进行签名：
openssl x509 -req -days 365 -in HTTPSServers_192_168_10_101.csr -CA HTTPSMiddlemanSigningCA.crt -CAkey HTTPSMiddlemanSigningCAKey.key -CAcreateserial -out HTTPSServers_192_168_10_101_CA.crt -extfile openssl.cnf -extensions v3_req
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSServers_192_168_10_101_001, OU = HTTPSServers_192_168_10_101, CN = 192.168.10.101, emailAddress = 1227839175@qq.com
Enter pass phrase for HTTPSMiddlemanSigningCAKey.key:@HTTPSMiddlemanSigningCA.2022001A#

4）：
type HTTPSServers_192_168_10_101_CA.crt > HTTPSServers_192_168_10_101.pem

5）：
type HTTPSServers_192_168_10_101_Key.key >> HTTPSServers_192_168_10_101.pem



第6步：“客户端证书”，可以有多个，现在假定只创建一个“HTTPSClients_192_168_10_101_CA.crt”。
“客户端证书”用于“代理服务器”之类的，比如Node客户端、Deno客户端什么的。
生成“客户端证书”的过程与生成“成员证书/x.509服务器证书”的过程基
本相同，唯一的区别是要确保O（Organization Name）、OU（Organizational Unit）和DC值的组合与上面生成的“成员证书/x.509服务器证书”不同。
1）：
这里就不用进行加密：
openssl genrsa -out HTTPSClients_192_168_10_101_Key.key 4096

2）：
openssl req -new -key HTTPSClients_192_168_10_101_Key.key -out HTTPSClients_192_168_10_101.csr -config openssl.cnf
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [HTTPSClients_192_168_10_101_001]:HTTPSClients_192_168_10_101_001
Organizational Unit Name (eg, section) [HTTPSClients_192_168_10_101]:HTTPSClients_192_168_10_101
Common Name (e.g. server FQDN or YOUR name) [192.168.10.101]:192.168.10.101
Email Address [1227839175@qq.com]:1227839175@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password [20220101100]:20220101100
An optional company name [HTTPSClients_192_168_10_101_001]:HTTPSClients_192_168_10_101_001

3）：
openssl x509 -req -days 365 -in HTTPSClients_192_168_10_101.csr -CA HTTPSMiddlemanSigningCA.crt -CAkey HTTPSMiddlemanSigningCAKey.key -CAcreateserial -out HTTPSClients_192_168_10_101_CA.crt -extfile openssl.cnf -extensions v3_req
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSClients_192_168_10_101_001, OU = HTTPSClients_192_168_10_101, CN = 192.168.10.101, emailAddress = 1227839175@qq.com
Enter pass phrase for HTTPSMiddlemanSigningCAKey.key:@HTTPSMiddlemanSigningCA.2022001A#

4）：
type HTTPSClients_192_168_10_101_CA.crt > HTTPSClients_192_168_10_101.pem

5）：
type HTTPSClients_192_168_10_101_Key.key >> HTTPSClients_192_168_10_101.pem



第7步：还得将输出的“HTTPSRootCA.p12”的内容转换为“base64”编码的新文件“HTTPSRootCA.p12.base64”：
openssl pkcs12 -export -clcerts -in HTTPSRootCA.crt -inkey HTTPSRootCAKey.key -out HTTPSRootCA.p12 -password pass:@HTTPSRootCA.2022001A#
执行输出：
Warning: -clcerts option ignored with -export
Enter pass phrase for HTTPSRootCAKey.key:@HTTPSRootCA.2022001A#
