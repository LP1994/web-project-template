发现本机系统的OpenSSL版本默认指向：OpenSSL 1.1.1i  8 Dec 2020。
无论怎么配置系统环境变量都没法更改这个默认的版本，所以，要使用OpenSSL 3.X进行生成证书，那就进到“D:\OpenSSL\App\bin”，然后在其下进行各种证书配置操作。

Windows查看证书的命令：certmgr.msc（当前用户）、mmc（本地计算机）

关于在生成操作的过程中，对于输入值的说明：
1、以生成“HTTPSSL001_Root_CA.crt”中的输入值为基准。
2、生成“HTTPSSL001_Servers_192_168_10_101_CA.csr”时，输入值中除了“Common Name”、“Organizational Unit Name”选项的值可以跟“基准”的“Common Name”、“Organizational Unit Name”选项的值不一样（最好不一样），其他选项值都必须跟“基准”的一样。
3、生成“HTTPSSL001_Clients_192_168_10_101_CA.csr”时，输入值中除了“Common Name”、“Organizational Unit Name”选项的值可以跟“基准”的“Common Name”、“Organizational Unit Name”选项的值不一样（最好不一样），其他选项值都必须跟“基准”的一样。
4、多个“服务端CA证书”之间的输入值中，“Organizational Unit Name”选项的值必须一样。
5、多个“客户端CA证书”之间的输入值中，“Organizational Unit Name”选项的值必须一样。
6、多个“服务端CA证书”之间的输入值中，“Common Name”选项的值可以是各自不同的域名、IP，且该值也这只能是域名、IP。当然在生成的过程中可以通过设置“subjectAltName”来设置多个域名、IP别名。
7、多个“客户端CA证书”之间的输入值中，“Common Name”选项的值可以是各自不同的域名、IP，且该值也这只能是域名、IP。但生成的过程中不可以通过设置“subjectAltName”来设置多个域名、IP别名，会导致证书无法被浏览器使用。



1、生成“私钥，HTTPSSL001_Root_CA_Key.key”：
建议对“私钥，HTTPSSL001_Root_CA_Key.key”进行加密处理：
openssl genrsa -aes256 -out HTTPSSL001_Root_CA_Key.key 4096
执行输出：
Enter PEM pass phrase:@HTTPSSL001.2022#
Verifying - Enter PEM pass phrase:@HTTPSSL001.2022#



2、生成“根CA证书，HTTPSSL001_Root_CA.crt”：
openssl req -x509 -config openssl.cnf -new -nodes -key HTTPSSL001_Root_CA_Key.key -days 365 -out HTTPSSL001_Root_CA.crt
执行输出：
Enter pass phrase for HTTPSSL001_Root_CA_Key.key:@HTTPSSL001.2022#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [HTTPSSL001]:HTTPSSL001
Organizational Unit Name (eg, section) [IT]:IT
Common Name (e.g. server FQDN or YOUR name) [192.168.10.101]:HTTPSSL001_Root_CA
Email Address [2726893248@qq.com]:2726893248@qq.com

生成的一个可读版本来验证“根CA证书，HTTPSSL001_Root_CA.crt”的内容：
openssl x509 -noout -text -in MongoDBSSL001_Root_CA.crt
执行输出：
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            60:ce:10:d4:d1:f1:f4:d3:2d:ba:ea:c6:f5:cb:01:b2:4d:d0:83:87
        Signature Algorithm: sha512WithRSAEncryption
        Issuer: C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSSL001, OU = IT, CN = HTTPSSL001_Root_CA, emailAddress = 2726893248@qq.com
        Validity
            Not Before: Dec  6 08:17:05 2022 GMT
            Not After : Dec  6 08:17:05 2023 GMT
        Subject: C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSSL001, OU = IT, CN = HTTPSSL001_Root_CA, emailAddress = 2726893248@qq.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:c4:ee:c1:e1:47:c8:a7:60:6c:74:e5:45:4f:de:
                    dd:c8:4c:da:d5:f9:fb:fc:1d:ad:60:d4:fb:79:7d:
                    24:e9:81:c2:8f:80:8c:7f:d5:b0:e7:3d:36:b0:35:
                    db:81:7c:71:71:1b:8e:e8:20:f8:35:e0:89:23:45:
                    1c:77:db:17:7c:12:b5:33:78:7f:85:48:b2:c4:10:
                    f0:2b:ce:7c:fd:7f:82:bb:d6:b0:d6:62:48:ce:a5:
                    fb:98:ad:d6:dd:98:74:c0:76:e7:69:fc:ee:97:8c:
                    40:9f:c0:a7:d8:dc:4e:13:69:8c:54:23:14:36:a6:
                    3f:d0:fc:f3:a4:50:46:4a:f6:df:79:35:a6:f7:58:
                    33:70:e6:17:59:c3:df:97:f7:e0:a3:27:68:38:34:
                    6d:56:4f:6f:ea:d1:63:04:14:e7:f2:35:46:ec:61:
                    9e:6d:37:3e:e8:d6:cf:41:1b:45:2d:c1:88:aa:15:
                    33:a5:fe:47:1d:47:92:17:92:6d:5a:d3:5d:7a:1e:
                    dd:4f:fb:7c:3f:2c:3a:d1:bc:75:4c:cf:d0:ce:9b:
                    09:7b:b6:c5:0a:4e:4a:c1:8c:cb:0c:b6:bb:6a:09:
                    8d:4e:5d:7e:f0:2b:54:42:02:d7:cb:fa:69:e4:2d:
                    02:bc:3f:f6:bd:1f:ed:73:d3:3f:09:96:b2:4f:bc:
                    e9:6d:19:2f:dd:eb:b6:55:68:fa:f8:f1:93:e4:b7:
                    4b:7c:a7:41:60:43:64:39:6f:fd:fc:40:58:80:06:
                    32:e6:f4:f5:14:a5:3f:cc:8c:19:0f:78:0b:c2:91:
                    09:5d:d2:9a:15:1d:10:bf:e6:64:fb:3e:f1:b3:9f:
                    50:ae:a1:5f:f8:8a:eb:cc:7d:23:d7:c7:e9:54:9f:
                    b0:8b:5b:58:70:1e:90:60:3e:df:24:1c:a0:5a:45:
                    d6:12:16:c6:18:a1:bf:d8:bd:d0:4a:7e:8b:b9:0d:
                    d8:5d:eb:45:6f:59:0b:77:7b:3c:92:41:3a:09:55:
                    bd:d9:35:ab:ab:1b:46:ac:79:4c:b3:85:51:02:6a:
                    ff:83:73:39:17:c1:af:a6:0d:43:3d:c8:43:61:ed:
                    52:42:67:00:a4:60:af:18:3f:ea:1b:1d:06:68:c4:
                    07:d9:b3:f3:6b:87:1a:c1:01:6a:9d:07:1f:81:19:
                    cb:08:df:a1:8a:8e:9f:7f:aa:6a:94:6c:21:cc:e9:
                    f9:84:cd:18:3c:09:d4:f3:45:24:03:5e:c2:f2:37:
                    4c:83:0a:26:12:b9:a3:85:4e:0f:86:34:6d:81:85:
                    c1:69:eb:8a:13:96:cf:37:85:b3:46:15:cf:dd:01:
                    94:ce:65:b2:0a:5e:e7:01:b1:ed:5b:b6:4b:03:ba:
                    15:b1:a5
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                7B:CA:6F:A1:8A:B8:02:22:13:25:ED:47:79:74:5B:04:A6:A4:DC:A3
            X509v3 Authority Key Identifier:
                7B:CA:6F:A1:8A:B8:02:22:13:25:ED:47:79:74:5B:04:A6:A4:DC:A3
            X509v3 Basic Constraints: critical
                CA:TRUE
    Signature Algorithm: sha512WithRSAEncryption
    Signature Value:
        67:62:38:8f:40:a4:60:86:61:3e:9e:2e:4e:83:cc:30:0b:9e:
        61:8b:05:ea:60:48:c8:66:5b:2d:69:8e:9a:37:77:ed:70:75:
        fe:8d:1b:dd:d1:23:53:f5:eb:33:4e:02:c5:29:cc:8f:57:5b:
        bb:c8:68:c8:39:ea:51:da:a6:a5:79:d0:74:44:fe:8a:eb:90:
        8a:50:83:5e:19:ad:99:ad:fb:a1:4d:f4:63:5b:68:dd:7d:31:
        7e:a4:94:84:30:3e:52:0e:41:47:5f:75:b3:fa:13:8a:ab:9f:
        ad:70:c3:24:ac:03:b6:4c:6a:0a:3f:26:ea:fd:cc:a0:62:6c:
        8b:81:a2:f0:db:17:38:8d:b7:26:e6:f6:fc:f7:c1:89:31:31:
        ab:88:14:40:7a:08:e5:fd:81:64:ef:63:26:63:2d:3b:d4:2f:
        1f:d0:c7:9f:b8:d1:0b:6a:e5:e3:93:db:59:6e:b1:63:1a:f5:
        6a:26:d8:8b:76:49:ca:7a:f2:73:66:16:37:f3:85:4c:a4:7f:
        dc:8a:34:2f:55:8f:37:dc:31:45:59:e2:27:1f:2a:c1:84:87:
        fa:ba:61:fe:ee:64:0a:91:5f:4e:e5:b5:bd:57:0f:ad:71:27:
        f8:96:11:be:5f:26:88:6b:65:72:df:70:c4:dd:0b:43:30:14:
        fc:75:8a:62:96:13:84:14:1e:18:38:bb:bc:b6:c9:df:ea:0b:
        e3:c9:e8:24:47:9f:5c:83:a1:37:64:bc:74:67:eb:50:0b:21:
        bb:e6:cd:1c:e7:da:14:c8:f5:68:16:7c:eb:ff:8a:91:79:e5:
        1b:ef:70:16:f9:9d:23:57:da:e3:53:e3:44:01:d1:fe:8a:69:
        fe:26:4a:fe:7b:31:cb:fc:fe:bd:f2:90:d8:f5:7a:5d:b8:d6:
        7f:a5:42:2c:3e:81:e1:3a:e0:67:73:99:01:18:23:e2:b0:50:
        96:fb:31:cb:d6:e5:c8:34:f1:ac:9f:d0:a8:9f:eb:f1:3e:d3:
        e6:24:28:cb:61:b8:91:c3:04:c2:21:21:cc:37:b8:bc:3e:be:
        cf:72:c0:84:fe:e2:9c:ad:82:cf:51:1b:aa:b1:c7:29:ce:84:
        8a:d7:eb:a6:74:26:95:77:fe:6c:b8:73:13:29:78:63:0c:c7:
        02:b4:b6:ac:d9:79:02:40:90:c9:2f:c6:57:23:b0:a9:57:25:
        3c:6f:e0:b9:be:d5:b1:ab:72:fe:7c:03:52:66:8c:1b:ab:ed:
        69:6d:5e:b0:4a:94:9b:75:b2:39:0d:a2:75:10:2d:0c:a9:c3:
        64:73:18:12:75:a5:83:a0:ae:7c:b3:6c:fb:bf:60:04:be:a0:
        36:62:20:2c:56:0a:88:26



3、生成一个用于生成“服务端CA证书”的“证书签名请求，HTTPSSL001_Servers_192_168_10_101_CA.csr”：
openssl req -new -key HTTPSSL001_Root_CA_Key.key -out HTTPSSL001_Servers_192_168_10_101_CA.csr -config openssl.cnf
执行输出：
Enter pass phrase for HTTPSSL001_Root_CA_Key.key:@HTTPSSL001.2022#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [HTTPSSL001]:HTTPSSL001
Organizational Unit Name (eg, section) [IT]:HTTPSSL001_Servers
Common Name (e.g. server FQDN or YOUR name) [192.168.10.101]:192.168.10.101
Email Address [2726893248@qq.com]:2726893248@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:@HTTPSSL001.2022#
An optional company name [HTTPSSL001]:HTTPSSL001



4、生成一个用于生成“客户端CA证书”的“证书签名请求，HTTPSSL001_Clients_192_168_10_101_CA.csr”：
openssl req -new -key HTTPSSL001_Root_CA_Key.key -out HTTPSSL001_Clients_192_168_10_101_CA.csr -config openssl.cnf
执行输出：
Enter pass phrase for HTTPSSL001_Root_CA_Key.key:@HTTPSSL001.2022#
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [HTTPSSL001]:HTTPSSL001
Organizational Unit Name (eg, section) [IT]:HTTPSSL001_Clients
Common Name (e.g. server FQDN or YOUR name) [192.168.10.101]:192.168.10.101
Email Address [2726893248@qq.com]:2726893248@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:@HTTPSSL001.2022#
An optional company name [HTTPSSL001]:HTTPSSL001



5、生成“服务端CA证书，HTTPSSL001_Servers_192_168_10_101_CA.crt”：
1）：
openssl x509 -req -in HTTPSSL001_Servers_192_168_10_101_CA.csr -CA HTTPSSL001_Root_CA.crt -CAkey HTTPSSL001_Root_CA_Key.key -CAcreateserial -out HTTPSSL001_Servers_192_168_10_101_CA.crt -days 365 -sha512 -extfile https.ext
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSSL001, OU = HTTPSSL001_Servers, CN = 192.168.10.101, emailAddress = 2726893248@qq.com
Enter pass phrase for HTTPSSL001_Root_CA_Key.key:@HTTPSSL001.2022#
2）：
type HTTPSSL001_Servers_192_168_10_101_CA.crt > HTTPSSL001_Servers_192_168_10_101_CA.pem
3）：
type HTTPSSL001_Root_CA_Key.key >> HTTPSSL001_Servers_192_168_10_101_CA.pem



6、生成“客户端CA证书，HTTPSSL001_Clients_192_168_10_101_CA.crt”：
1）：
openssl x509 -req -in HTTPSSL001_Clients_192_168_10_101_CA.csr -CA HTTPSSL001_Root_CA.crt -CAkey HTTPSSL001_Root_CA_Key.key -CAcreateserial -out HTTPSSL001_Clients_192_168_10_101_CA.crt -days 365 -sha512
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSSL001, OU = HTTPSSL001_Clients, CN = 192.168.10.101, emailAddress = 2726893248@qq.com
Enter pass phrase for HTTPSSL001_Root_CA_Key.key:@HTTPSSL001.2022#
2）：
type HTTPSSL001_Clients_192_168_10_101_CA.crt > HTTPSSL001_Clients_192_168_10_101_CA.pem
3）：
type HTTPSSL001_Root_CA_Key.key >> HTTPSSL001_Clients_192_168_10_101_CA.pem



7、将“根CA证书，HTTPSSL001_Root_CA.crt”打包为“p12格式，HTTPSSL001_Root_CA.p12”：
openssl pkcs12 -export -clcerts -in HTTPSSL001_Root_CA.crt -inkey HTTPSSL001_Root_CA_Key.key -out HTTPSSL001_Root_CA.p12 -password pass:@HTTPSSL001.2022#
执行输出：
Warning: -clcerts option ignored with -export
Enter pass phrase for HTTPSSL001_Root_CA_Key.key:@HTTPSSL001.2022#



8、还得将输出的“HTTPSSL001_Root_CA.p12”的内容转换为“base64”编码的新文件“HTTPSSL001_Root_CA.p12.base64”。
Windows系统上用Node写一个转换就行了，代码如下：
'use strict';

import {
  readFileSync,
  writeFileSync,
} from 'node:fs';

import {
  dirname,
  join,
} from 'node:path';

import {
  fileURLToPath,
} from 'node:url';

function Get__dirname( import_meta_url = import.meta.url ){
  return dirname( Get__filename( import_meta_url ) );
}

function Get__filename( import_meta_url = import.meta.url ){
  return fileURLToPath( import_meta_url );
}

const __dirname = Get__dirname( import.meta.url );

writeFileSync(
  join( __dirname, './HTTPSSL001_Root_CA.p12.base64' ),
  readFileSync( join( __dirname, './HTTPSSL001_Root_CA.p12' ) ).toString( 'base64' )
);
