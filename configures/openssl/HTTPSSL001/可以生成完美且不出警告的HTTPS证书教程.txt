发现本机系统的OpenSSL版本默认指向：OpenSSL 1.1.1i  8 Dec 2020。
无论怎么配置系统环境变量都没法更改这个默认的版本，所以，要使用OpenSSL 3.X进行生成证书，那就进到“D:\OpenSSL\App\bin”，然后在其下进行各种证书配置操作。

Windows查看证书的命令：certmgr.msc（当前用户）、mmc（本地计算机）

关于在生成操作的过程中，对于输入值的说明：
1、以生成“HTTPSSL001_Root_CA.crt”中的输入值为基准。
2、生成“HTTPSSL001_Servers_192_168_10_101_CA.csr”时，输入值中除了“Common Name”、“Organizational Unit Name”选项的值可以跟“基准”的“Common Name”、“Organizational Unit Name”选项的值不一样（最好不一样），其他选项值都必须跟“基准”的一样。
3、生成“HTTPSSL001_Clients_192_168_10_101_CA.csr”时，输入值中除了“Common Name”、“Organizational Unit Name”选项的值可以跟“基准”的“Common Name”、“Organizational Unit Name”选项的值不一样（最好不一样），其他选项值都必须跟“基准”的一样。
4、多个“服务端CA证书”之间的输入值中，“Organizational Unit Name”选项的值必须一样。
5、多个“客户端CA证书”之间的输入值中，“Organizational Unit Name”选项的值必须一样。
6、多个“服务端CA证书”之间的输入值中，“Common Name”选项的值可以是各自不同的域名、IP，且该值也这只能是域名、IP。当然在生成的过程中可以通过设置“subjectAltName”来设置多个域名、IP别名。
7、多个“客户端CA证书”之间的输入值中，“Common Name”选项的值可以是各自不同的域名、IP，且该值也这只能是域名、IP。但生成的过程中不可以通过设置“subjectAltName”来设置多个域名、IP别名，会导致证书无法被浏览器使用。



1、生成“私钥，HTTPSSL001_Root_CA_Key.key”：
对于生成用于网站的HTTPS自定义证书（并不是所有的支持端都有一个类似“密码”的选项，它是用于解码加了密的私钥），不要对“私钥，HTTPSSL001_Root_CA_Key.key”进行加密处理（使用“openssl genrsa -aes256”这个就是启用加密）：
openssl genrsa -out HTTPSSL001_Root_CA_Key.key 4096



2、生成“根CA证书，HTTPSSL001_Root_CA.crt”：
openssl req -x509 -config openssl.cnf -new -nodes -key HTTPSSL001_Root_CA_Key.key -days 365 -out HTTPSSL001_Root_CA.crt
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [HTTPSSL001]:HTTPSSL001
Organizational Unit Name (eg, section) [IT]:IT
Common Name (e.g. server FQDN or YOUR name) [192.168.10.101]:HTTPSSL001_Root_CA
Email Address [2726893248@qq.com]:2726893248@qq.com

生成的一个可读版本来验证“根CA证书，HTTPSSL001_Root_CA.crt”的内容：
openssl x509 -noout -text -in HTTPSSL001_Root_CA.crt
执行输出：
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            6d:f6:34:3e:24:a6:2f:09:8e:a0:36:19:e3:e5:77:d5:a0:e6:e6:a9
        Signature Algorithm: sha512WithRSAEncryption
        Issuer: C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSSL001, OU = IT, CN = HTTPSSL001_Root_CA, emailAddress = 2726893248@qq.com
        Validity
            Not Before: Dec  6 10:50:55 2022 GMT
            Not After : Dec  6 10:50:55 2023 GMT
        Subject: C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSSL001, OU = IT, CN = HTTPSSL001_Root_CA, emailAddress = 2726893248@qq.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (4096 bit)
                Modulus:
                    00:c7:79:d8:10:51:ca:7e:af:f9:ea:a8:17:9d:a7:
                    0b:d0:49:3d:24:89:2c:fc:39:64:74:59:cc:98:9b:
                    f5:38:1d:82:45:e8:e4:c1:40:29:e6:a9:94:43:78:
                    85:44:8d:33:45:01:85:3a:29:32:6e:57:d0:68:f9:
                    e4:57:08:1e:87:98:da:46:0f:fe:e4:55:ce:be:69:
                    55:8c:f2:90:38:05:f3:6a:d9:81:1d:de:c2:55:1c:
                    d9:50:c7:03:75:d0:3f:f6:02:8f:92:ea:61:dc:41:
                    d4:45:54:71:9d:6a:4f:34:da:eb:87:b5:43:6b:44:
                    19:54:e6:d9:6c:2a:70:a7:aa:1f:1b:ed:8c:5b:46:
                    ae:f1:16:31:78:75:11:5a:67:1e:84:27:20:6d:eb:
                    9c:a8:b3:03:1c:6e:16:b8:a1:0d:24:64:ee:c9:7b:
                    6e:1e:9d:d1:1f:a1:01:d6:2e:8b:bd:58:fa:b4:66:
                    fe:5f:70:6f:b7:8d:a5:47:e4:d4:6e:33:68:02:35:
                    0e:22:a2:7c:f3:40:4b:5d:91:50:27:ec:7b:77:aa:
                    b6:d4:fb:0b:8c:07:e8:e8:e8:f8:8f:71:f4:2c:d4:
                    de:82:e6:8e:c1:f8:1a:1b:ff:a7:32:0c:04:c2:6f:
                    50:c1:e6:27:a4:c9:dc:27:16:f3:62:8e:60:a8:23:
                    a6:18:80:0f:b9:af:5e:89:c0:b1:1f:55:ba:04:22:
                    9b:5a:47:f6:79:0e:33:36:fe:d0:82:fa:66:ed:76:
                    08:a1:46:a4:30:c9:df:1b:15:98:fc:90:1c:66:d0:
                    06:d6:a6:47:6e:f2:e0:16:e6:46:88:a4:ee:04:af:
                    76:8f:25:49:b6:ac:69:84:51:b8:97:a9:b5:98:42:
                    b7:c4:c3:1f:45:99:ce:b8:3d:18:19:4f:12:20:d5:
                    d5:2d:b4:17:38:1a:29:5c:6d:b8:e8:43:88:65:79:
                    99:ff:58:7c:28:b8:24:a3:64:7f:81:b9:70:51:2a:
                    2b:5a:67:43:3d:59:8c:90:bc:a2:20:14:a9:a9:06:
                    20:cc:24:93:c7:9e:d7:e6:e4:1d:b0:d0:ae:e1:30:
                    de:9f:c7:ad:a1:f9:e8:f3:ea:fa:a8:fd:a8:29:c7:
                    a9:8d:f7:b8:60:a1:f9:c0:7d:d9:be:8b:7c:b4:0a:
                    11:6c:50:55:4d:69:46:f0:59:04:c7:42:72:f6:c8:
                    33:70:4d:38:98:95:0a:f3:dd:96:8d:b1:00:ed:d7:
                    e5:34:76:ad:83:75:5e:10:e2:5d:f3:f3:3c:cb:e8:
                    a1:a4:8d:48:b2:1d:bb:66:c8:8b:11:0e:cf:50:e5:
                    1c:5e:ab:98:3d:a6:77:f5:aa:d7:41:03:58:a6:4b:
                    c6:7f:f7
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                EE:86:19:FC:75:89:FE:46:74:82:03:06:B6:63:44:E8:25:38:3F:83
            X509v3 Authority Key Identifier:
                EE:86:19:FC:75:89:FE:46:74:82:03:06:B6:63:44:E8:25:38:3F:83
            X509v3 Basic Constraints: critical
                CA:TRUE
    Signature Algorithm: sha512WithRSAEncryption
    Signature Value:
        a2:e8:be:bb:05:52:76:f5:6f:27:1f:79:4f:a1:a1:99:70:72:
        18:6d:21:3a:8b:c2:26:c5:2e:82:e7:60:90:ac:02:f5:c1:a4:
        50:01:d5:56:54:a8:ef:76:b8:cb:49:c3:aa:51:f5:fd:52:1e:
        53:1a:2a:1e:6a:6a:82:c7:ba:bd:c1:a0:79:aa:ca:c0:d9:d3:
        f5:cf:85:49:d2:cc:4e:95:1b:34:1c:06:b5:c3:3d:dd:74:10:
        31:49:34:b0:60:bd:ad:50:66:fd:42:77:d8:62:6a:7f:be:5e:
        87:bf:9d:a5:8d:27:60:f7:ad:9c:41:be:46:91:bb:45:99:db:
        55:de:d7:6f:c0:79:d9:a7:10:f2:c4:44:09:b7:be:28:c4:ac:
        fb:ac:c6:2a:39:2e:6f:85:03:98:ac:9c:e0:e9:bb:7b:ff:1c:
        94:43:e7:cb:34:c3:aa:d8:73:d0:bd:f3:4a:5b:93:80:1f:b4:
        5a:7e:9c:d0:77:1a:c5:61:15:84:76:ff:66:7e:7d:ee:1a:ee:
        14:75:52:7b:9d:a4:9a:1a:35:e8:0d:be:bd:65:f4:cc:df:74:
        21:ae:48:e0:3c:ac:92:5c:80:13:f4:ed:1b:43:87:d3:52:ce:
        e6:f5:d2:e1:c9:21:49:61:a4:55:67:09:69:81:12:54:7b:cd:
        4b:d7:da:fe:68:45:c0:ee:0e:d1:93:a7:f3:4b:13:8d:25:2d:
        e0:f8:f1:02:9c:ee:e4:1a:ba:e6:b6:ca:2b:4b:f0:f2:32:d7:
        36:b5:39:02:3f:85:79:79:57:59:8f:a5:36:a5:15:aa:80:64:
        28:cf:2b:2c:5c:2c:58:bf:f1:74:e8:56:71:dd:e7:63:2d:1d:
        6d:75:4b:cf:36:f9:f2:98:8c:95:73:05:b8:5e:e4:9e:bf:bf:
        e1:c3:3e:74:55:ee:5b:f3:c8:8f:30:96:0c:a4:1d:b6:42:bd:
        de:08:f3:30:cd:0f:39:c8:f4:b0:f3:7b:bc:1b:4f:4c:5a:e3:
        ec:68:7f:c2:1a:5c:97:a2:8b:33:6d:f7:19:41:e5:55:1c:7e:
        ea:77:47:73:ba:af:b3:80:7b:8a:b1:29:68:05:cc:9e:a1:40:
        3a:32:33:ec:1c:85:43:4b:e4:3f:53:9a:5b:11:11:5a:a8:62:
        b2:39:e9:ab:47:3d:1b:b3:95:6c:55:3e:2e:6c:27:d5:62:62:
        76:5a:95:90:2f:82:5c:94:23:02:90:0c:c0:d8:d0:8d:41:7a:
        b3:6d:a0:95:e0:53:c5:1f:ec:e1:0c:67:c2:5c:cb:f7:93:28:
        45:27:5b:d5:86:89:23:6f:b2:bf:8b:6a:9b:7e:c0:b3:0f:bd:
        e7:45:ed:42:b4:b1:28:27



3、生成一个用于生成“服务端CA证书”的“证书签名请求，HTTPSSL001_Servers_192_168_10_101_CA.csr”：
openssl req -new -key HTTPSSL001_Root_CA_Key.key -out HTTPSSL001_Servers_192_168_10_101_CA.csr -config openssl.cnf
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [HTTPSSL001]:HTTPSSL001
Organizational Unit Name (eg, section) [IT]:HTTPSSL001_Servers
Common Name (e.g. server FQDN or YOUR name) [192.168.10.101]:192.168.10.101
Email Address [2726893248@qq.com]:2726893248@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:@HTTPSSL001.2022#
An optional company name [HTTPSSL001]:HTTPSSL001



4、生成一个用于生成“客户端CA证书”的“证书签名请求，HTTPSSL001_Clients_192_168_10_101_CA.csr”：
openssl req -new -key HTTPSSL001_Root_CA_Key.key -out HTTPSSL001_Clients_192_168_10_101_CA.csr -config openssl.cnf
执行输出：
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:CN
State or Province Name (full name) [GuangDong]:GuangDong
Locality Name (eg, city) [ShenZhen]:ShenZhen
Organization Name (eg, company) [HTTPSSL001]:HTTPSSL001
Organizational Unit Name (eg, section) [IT]:HTTPSSL001_Clients
Common Name (e.g. server FQDN or YOUR name) [192.168.10.101]:192.168.10.101
Email Address [2726893248@qq.com]:2726893248@qq.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:@HTTPSSL001.2022#
An optional company name [HTTPSSL001]:HTTPSSL001



5、生成“服务端CA证书，HTTPSSL001_Servers_192_168_10_101_CA.crt”：
1）：
openssl x509 -req -in HTTPSSL001_Servers_192_168_10_101_CA.csr -CA HTTPSSL001_Root_CA.crt -CAkey HTTPSSL001_Root_CA_Key.key -CAcreateserial -out HTTPSSL001_Servers_192_168_10_101_CA.crt -days 365 -sha512 -extfile https.ext
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSSL001, OU = HTTPSSL001_Servers, CN = 192.168.10.101, emailAddress = 2726893248@qq.com
2）：
type HTTPSSL001_Servers_192_168_10_101_CA.crt > HTTPSSL001_Servers_192_168_10_101_CA.pem
3）：
type HTTPSSL001_Root_CA_Key.key >> HTTPSSL001_Servers_192_168_10_101_CA.pem



6、生成“客户端CA证书，HTTPSSL001_Clients_192_168_10_101_CA.crt”：
1）：
openssl x509 -req -in HTTPSSL001_Clients_192_168_10_101_CA.csr -CA HTTPSSL001_Root_CA.crt -CAkey HTTPSSL001_Root_CA_Key.key -CAcreateserial -out HTTPSSL001_Clients_192_168_10_101_CA.crt -days 365 -sha512
执行输出：
Certificate request self-signature ok
subject=C = CN, ST = GuangDong, L = ShenZhen, O = HTTPSSL001, OU = HTTPSSL001_Clients, CN = 192.168.10.101, emailAddress = 2726893248@qq.com
2）：
type HTTPSSL001_Clients_192_168_10_101_CA.crt > HTTPSSL001_Clients_192_168_10_101_CA.pem
3）：
type HTTPSSL001_Root_CA_Key.key >> HTTPSSL001_Clients_192_168_10_101_CA.pem



7、将“根CA证书，HTTPSSL001_Root_CA.crt”打包为“p12格式，HTTPSSL001_Root_CA.p12”：
openssl pkcs12 -export -clcerts -in HTTPSSL001_Root_CA.crt -inkey HTTPSSL001_Root_CA_Key.key -out HTTPSSL001_Root_CA.p12 -password pass:@HTTPSSL001.2022#
执行输出：
Warning: -clcerts option ignored with -export



8、还得将输出的“HTTPSSL001_Root_CA.p12”的内容转换为“base64”编码的新文件“HTTPSSL001_Root_CA.p12.base64”。
Windows系统上用Node写一个转换就行了，代码如下：
'use strict';

import {
  readFileSync,
  writeFileSync,
} from 'node:fs';

import {
  dirname,
  join,
} from 'node:path';

import {
  fileURLToPath,
} from 'node:url';

function Get__dirname( import_meta_url = import.meta.url ){
  return dirname( Get__filename( import_meta_url ) );
}

function Get__filename( import_meta_url = import.meta.url ){
  return fileURLToPath( import_meta_url );
}

const __dirname = Get__dirname( import.meta.url );

writeFileSync(
  join( __dirname, './HTTPSSL001_Root_CA.p12.base64' ),
  readFileSync( join( __dirname, './HTTPSSL001_Root_CA.p12' ) ).toString( 'base64' )
);
